# DJANGO / CELERY CONFIGURATION
# ============================================================================

SITE_ID=1
CONTACT_EMAIL="contact@example.com"

# ENV variables to be set when running KinesinLMS locally during development
DEBUG=True
PYTHONUNBUFFERED=1
USE_DOCKER=no
DJANGO_PIPELINE="LOCAL"
DJANGO_SETTINGS_MODULE=config.settings.local
REDIS_URL=redis://localhost:6379/0
DJANGO_SECRET_KEY="(some django secret key)"

# Javascript
# ----------------------------------------------------------------------------
# We use calendar-based versioning for the
# GET variable used to bust client browser caches.
# TODO: Come up with better system for this.
KINESINLMS_JAVASCRIPT_VERSION="2023.1.4"

# SERVICE PROVIDERS:
# ============================================================================
# Configure the third-party services used by this Django app.
# Most information is stored in models (e.g. EmailProviderService, BadgeProvider, etc.)
# but secret information should be set in the env via the variable below...

# AWS
# ----------------------------------------------------------------------------
# Tracking events are sent to AWS Lambda via boto3
# For development and local testing, we use a separate lambda with its own cloudwatch log
DJANGO_AWS_KINESINLMS_EVENTS_LAMBDA="some-lambda-name-for-handling-kinesinlms-events"
DJANGO_AWS_STORAGE_BUCKET_NAME="some-storage-bucket-name"

# Credentials for IAM user kinesinlms-heroku-app-development
DJANGO_AWS_ACCESS_KEY_ID="some-aws-access-key-id"
DJANGO_AWS_S3_REGION_NAME="some-aws-region-name"
DJANGO_AWS_SECRET_ACCESS_KEY="some-django-aws-secret-access-key"

# EMAIL SERVICE PROVIDER
# ----------------------------------------------------------------------------
# Configure email gateway used by this Django app.
# The configuration below should match email settings defined production.py
# and the django-anymail library included in production.txt

# In the default configuration, we use PostMark.
EMAIL_SERVICE_TOKEN=""

# EMAIL AUTOMATION PROVIDER
# ----------------------------------------------------------------------------
# Configure the third-party email automation service used by this Django app.
# Most information is stored in the EmailProviderService model instance, but secret
# API keys should be set in the env via the variable below:

EMAIL_AUTOMATION_PROVIDER_API_KEY="" # some API key from email automation service

# SURVEYS PROVIDER
# ----------------------------------------------------------------------------
# User can store survey information in the SurveyProvider table,
# or if they want more security and only have one provider, they
# can use these env variables to store that info.

SURVEY_PROVIDER_API_KEY="(some api key from survey provider)"

# FORUM PROVIDER
# ----------------------------------------------------------------------------
# Configure the third-party forum automation service used by this Django app.
# Most information is stored in the ForumProvider model instance, but secret
# API keys should be set in the env via the variable below:

FORUM_API_KEY="(some API key from forum provider service)"
FORUM_SSO_SECRET="(some SSO secret from forum provider service)"
FORUM_WEBHOOK_SECRET="(some webhook secret from forum provider service)"

# BADGE PROVIDER
# ----------------------------------------------------------------------------
# Configure the third-party forum automation service used by this Django app.
# Most information is stored in the ForumProvider model instance, but secret
# account login info is set in the env via the variables below:

# For Badgr (the only implementation currently in KinesinMLS), these
# credentials are used to create an API key when first used.

BADGE_PROVIDER_USERNAME="" # some username from badge provider service
BADGE_PROVIDER_PASSWORD="" # some password from badge provider service

# OTHER INTEGRATIONS
# ============================================================================

# Sentry
SENTRY_DSN=""

# Recaptcha
RECAPTCHA_PUBLIC_KEY="(some recaptcha key)"
RECAPTCHA_PRIVATE_KEY="(some recaptcha private key)"
RECAPTCHA_USE_SSL=True
RECAPTCHA_USE_RECAPTCHA=False

# DJANGO / CELERY CONFIGURATION
# ============================================================================
# In development, it's easier if celery tasks are "eager", i.e avoid queuing
# async tasks and run them in the main process.

CELERY_TASK_ALWAYS_EAGER=True

# In production, it's better if celery tasks are "not eager", i.e queued
# and pulled off the queue by a separate celery beat worker process:
#
#   # Use config.settings.local if testing async celery during development.
#   DJANGO_SETTINGS_MODULE=config.settings.production \
#   DJANGO_READ_DOT_ENV_FILE=True \
#   celery -A config.celery_app worker -l info
#
#CELERY_TASK_ALWAYS_EAGER=False

# DOCKER
# ============================================================================
# When using Docker, these variables are used by docker-compose to
# override the default ports

DC_REDIS_PORT=6379
DC_DB_PORT=5432

DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres

# CUSTOM ENV VARIABLES FOR TEST ENV
# ============================================================================

# When you're running locally, you may want to set up quick integrations to
# external test accounts via things like management commands. You can define
# env variables to help you do that, then use them in things like factories or
# init management commands.
# Otherwise, you need to use the "management" user interface to manually set
# the providers up with the same information.
# These variables are prefixed with TEST_ to remind you they're not for production.

# BADGE PROVIDER
TEST_BADGE_PROVIDER_ISSUER_ID="(some test issuer ID from Badgr)"
TEST_BADGE_PROVIDER_COURSE_BADGE_CLASS_ID="(some test badge class ID from Badgr)"

TEST_EMAIL_AUTOMATION_PROVIDER_URL="(some test URL from email automation provider)"

TEST_SURVEY_PROVIDER_DATA_CENTER_ID="(some test data center ID from survey provider)"
