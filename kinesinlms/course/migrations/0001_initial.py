# Generated by Django 5.0.6 on 2024-08-05 10:04

import django_react_templatetags.mixins
import kinesinlms.course.constants
import kinesinlms.course.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Bookmark",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(django_react_templatetags.mixins.RepresentationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Cohort",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("name", models.CharField(blank=True, default=None, max_length=200, null=True)),
                ("slug", models.SlugField(default=None, max_length=200)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("DEFAULT", "default"), ("RANDOM", "random"), ("CUSTOM", "custom")],
                        default=None,
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CohortMembership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        help_text='A slug for this course. Try to use only alphanumeric characters, dashes and underscores. A recommended convention is to use all caps to represent the course title (e.g. PYSJ for "Planning Your Scientific Journey") This slug plus the "run" property are used to  create a unique "token" for this course.',
                        max_length=200,
                    ),
                ),
                (
                    "run",
                    models.CharField(
                        default="1",
                        help_text='The run for this course (e.g. "R1" to indicate the first of many runs, or "SP" for a continuously run, self-paced course). This run plus the "slug" property are used to create a unique "token" for this course.',
                        max_length=200,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(blank=True, help_text="The full name for the course.", max_length=400, null=True),
                ),
                (
                    "short_name",
                    models.CharField(
                        blank=True,
                        help_text="A short name for the course. (You can leave this empty if the full name isn't that long.)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(blank=True, help_text="Start date for the course, if any", null=True),
                ),
                ("end_date", models.DateTimeField(blank=True, help_text="End date for the course, if any", null=True)),
                (
                    "advertised_start_date",
                    models.TextField(blank=True, help_text="A more readable version of start_date.", null=True),
                ),
                (
                    "enrollment_start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start date for enrollment in course, if any. If left blank, enrollment is assumed to be open.",
                        null=True,
                    ),
                ),
                (
                    "enrollment_end_date",
                    models.DateTimeField(blank=True, help_text="End date for enrollment in course, if any", null=True),
                ),
                (
                    "self_paced",
                    models.BooleanField(default=True, help_text="Whether or not this course is self-paced."),
                ),
                (
                    "days_early_for_beta",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of days early before the official start date that beta-testers can begin.",
                        null=True,
                    ),
                ),
                (
                    "enable_certificates",
                    models.BooleanField(
                        default=True,
                        help_text="Enable certificates for this course if any 'passing' milestones are defined.",
                    ),
                ),
                (
                    "enable_badges",
                    models.BooleanField(
                        default=False, help_text="Enable badges for this course if any BadgeClasses are defined."
                    ),
                ),
                (
                    "enable_email_automations",
                    models.BooleanField(default=False, help_text="Enable email automations for this course."),
                ),
                (
                    "enable_forum",
                    models.BooleanField(default=False, help_text="Enable the forum service for this course."),
                ),
                (
                    "enable_surveys",
                    models.BooleanField(default=True, help_text="Enable surveys if any appear in this course."),
                ),
                (
                    "playlist_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL to an external playlist of videos, if one exists (e.g. YouTube)",
                        null=True,
                    ),
                ),
                (
                    "admin_only_enrollment",
                    models.BooleanField(
                        default=False, help_text="Only staff and superusers can enroll students in this course"
                    ),
                ),
                (
                    "enable_enrollment_survey",
                    models.BooleanField(
                        default=True,
                        help_text="Enable enrollment 'survey' composed of enrollment questions if any are defined.",
                    ),
                ),
                (
                    "course_home_content",
                    models.TextField(
                        blank=True, help_text="HTML content for the course home for enrolled students.", null=True
                    ),
                ),
                (
                    "enable_course_outline",
                    models.BooleanField(default=True, help_text="Enable the course outline for this course."),
                ),
                (
                    "content_license",
                    models.CharField(
                        blank=True, help_text="The license for the course content.", max_length=200, null=True
                    ),
                ),
                (
                    "content_license_url",
                    models.URLField(
                        blank=True, help_text="The URL for the license for the course content.", null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CourseNode",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[("ROOT", "root"), ("MODULE", "module"), ("SECTION", "section"), ("UNIT", "unit")],
                        default=kinesinlms.course.constants.NodeType["ROOT"],
                        max_length=50,
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DEFAULT", "Default"),
                            ("INTRODUCTION", "Introduction"),
                            ("LESSON", "Lesson"),
                            ("SURVEY", "Surveys"),
                            ("EXTRA_CONTENT", "Extra Content"),
                            ("PLAN", "Plan"),
                            ("ACTIVITY", "Activity"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                    ),
                ),
                ("display_name", models.CharField(blank=True, max_length=400, null=True)),
                ("slug", models.SlugField(allow_unicode=True, blank=True, max_length=200)),
                ("release_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "content_index",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="The number to show next to a node when rendered in navigation. This is separate from display_sequence as sometimes e.g. some modules do not have a number.",
                        null=True,
                    ),
                ),
                (
                    "display_sequence",
                    models.IntegerField(
                        default=0,
                        help_text="Ordering index for this node. Nodes will be sorted by this value when shown in navigation.",
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CoursePassed",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CourseResource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(help_text="The name of the resource.", max_length=200)),
                (
                    "description",
                    models.CharField(
                        blank=True, help_text="A short description of the resource.", max_length=500, null=True
                    ),
                ),
                ("resource_file", models.FileField(blank=True, null=True, upload_to="course_resources/")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CourseStaff",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        blank=True, choices=[("EDUCATOR", "Educator")], default="EDUCATOR", max_length=50, null=True
                    ),
                ),
                (
                    "allow_all_cohorts",
                    models.BooleanField(
                        default=False, verbose_name="Allow this course staff member to view all cohorts"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CourseUnit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("slug", models.SlugField(allow_unicode=True, blank=True, max_length=200, null=True, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard"),
                            ("MODULE_LEARNING_OBJECTIVES", "Module learning Objectives"),
                            ("SECTION_LEARNING_OBJECTIVES", "Section learning Objectives"),
                            ("MY_RESPONSES", "My Responses"),
                            ("PRINTABLE_REVIEW", "Printable Review"),
                            ("ROADMAP", "Roadmap"),
                        ],
                        db_index=True,
                        default="STANDARD",
                        max_length=50,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True, help_text="Appears at the top of a course unit.", max_length=400, null=True
                    ),
                ),
                ("short_description", models.TextField(blank=True, null=True)),
                ("course_only", models.BooleanField(default=False)),
                ("html_content", models.TextField(blank=True, null=True)),
                (
                    "html_content_type",
                    models.CharField(
                        choices=[("HTML", "HTML"), ("MARKDOWN", "Markdown"), ("PLAIN_TEXT", "Plain text")],
                        default="HTML",
                        max_length=50,
                    ),
                ),
                (
                    "enable_template_tags",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        help_text="Enables a limited number of template tags in this model's html_content field.",
                    ),
                ),
                ("json_content", models.JSONField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("DRAFT", "Draft"), ("PUBLISHED", "Published")], default="PUBLISHED", max_length=50
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("active", models.BooleanField(default=False)),
                ("beta_tester", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentSurvey",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("enabled", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EnrollmentSurveyAnswer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("answer", models.TextField(max_length=500)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EnrollmentSurveyCompletion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentSurveyQuestion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "question_type",
                    models.CharField(
                        choices=[("TEXT", "Text"), ("MULTIPLE_CHOICE", "Multiple Choice"), ("POLL", "Poll")],
                        default=kinesinlms.course.models.EnrollmentSurveyQuestionType["TEXT"],
                        max_length=100,
                    ),
                ),
                ("question", models.TextField(max_length=500)),
                ("definition", models.JSONField(blank=True, null=True)),
                ("display_order", models.IntegerField(default=0)),
            ],
            options={
                "ordering": ["display_order"],
            },
        ),
        migrations.CreateModel(
            name="Milestone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField(allow_unicode=True, blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=500, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CORRECT_ANSWERS", "Correct answers"),
                            ("VIDEO_PLAYS", "Video plays"),
                            ("FORUM_POSTS", "Forum Posts"),
                            ("SIMPLE_INTERACTIVE_TOOL_INTERACTIONS", "Simple interactive tool interactions"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "count_graded_only",
                    models.BooleanField(default=False, help_text="This milestone only counts 'graded' items."),
                ),
                (
                    "count_requirement",
                    models.IntegerField(blank=True, default=0, verbose_name="Count to reach milestone"),
                ),
                (
                    "min_score_requirement",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text="Please set a minimum score OR count requirement, not both.",
                        verbose_name="Minimum total score to reach milestone",
                    ),
                ),
                ("required_to_pass", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="MilestoneProgress",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("achieved", models.BooleanField(default=False)),
                ("achieved_date", models.DateTimeField(blank=True, null=True)),
                ("count", models.IntegerField(default=0, verbose_name="Count of progress")),
                ("total_score", models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name="MilestoneProgressBlock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("score", models.PositiveIntegerField(blank=True, default=1)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Notice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("IMPORTANT_DATE", "Important date"), ("NEWS_ITEM", "News Item")],
                        default=None,
                        max_length=50,
                        null=True,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=300, null=True)),
                ("html_content", models.TextField(blank=True, null=True)),
                ("date", models.DateTimeField(blank=True, null=True)),
                ("resource_url", models.CharField(blank=True, max_length=500, null=True)),
                ("sequence", models.IntegerField(default=0)),
            ],
        ),
    ]
