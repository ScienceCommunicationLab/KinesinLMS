# Generated by Django 5.0.6 on 2024-08-05 10:04

import django.db.models.deletion
import mptt.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("badges", "0002_initial"),
        ("catalog", "0001_initial"),
        ("course", "0001_initial"),
        ("forum", "0002_initial"),
        ("institutions", "0001_initial"),
        ("learning_library", "0001_initial"),
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="bookmark",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="bookmarks", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="cohort_forum_group",
            field=models.ForeignKey(
                blank=True,
                help_text="The forum cohort group for this cohort.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cohorts",
                to="forum.cohortforumgroup",
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="institution",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="institution",
                to="institutions.institution",
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="cohortmembership",
            name="cohort",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="cohort_memberships", to="course.cohort"
            ),
        ),
        migrations.AddField(
            model_name="cohortmembership",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cohort_memberships",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="students",
            field=models.ManyToManyField(
                related_name="members", through="course.CohortMembership", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="catalog_description",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course",
                to="catalog.coursecatalogdescription",
            ),
        ),
        migrations.AddField(
            model_name="cohort",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="cohorts", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="bookmarks", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="coursenode",
            name="parent",
            field=mptt.fields.TreeForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="course.coursenode",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="course_root_node",
            field=models.OneToOneField(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="course", to="course.coursenode"
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="unit_node",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookmarks",
                to="course.coursenode",
            ),
        ),
        migrations.AddField(
            model_name="coursepassed",
            name="badge_assertion",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course_passed_items",
                to="badges.badgeassertion",
            ),
        ),
        migrations.AddField(
            model_name="coursepassed",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="course_passed_items", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="coursepassed",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_passed_items",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="courseresource",
            name="course",
            field=models.ForeignKey(
                help_text="A resource (e.g. PDF file) for this course.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_resources",
                to="course.course",
            ),
        ),
        migrations.AddField(
            model_name="coursestaff",
            name="cohorts",
            field=models.ManyToManyField(blank=True, to="course.cohort"),
        ),
        migrations.AddField(
            model_name="coursestaff",
            name="course",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_staffs",
                to="course.course",
            ),
        ),
        migrations.AddField(
            model_name="coursestaff",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="course_staffs", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="courseunit",
            name="contents",
            field=models.ManyToManyField(
                related_name="units", through="learning_library.UnitBlock", to="learning_library.block"
            ),
        ),
        migrations.AddField(
            model_name="courseunit",
            name="course",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_units",
                to="course.course",
            ),
        ),
        migrations.AddField(
            model_name="courseunit",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="coursenode",
            name="unit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_nodes",
                to="course.courseunit",
            ),
        ),
        migrations.AddField(
            model_name="enrollment",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="enrollments", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="enrollment",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="enrollments", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurvey",
            name="course",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, related_name="enrollment_survey", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurveyanswer",
            name="enrollment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollment_questions",
                to="course.enrollment",
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurveycompletion",
            name="enrollment_survey",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollment_survey_completion",
                to="course.enrollmentsurvey",
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurveycompletion",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollment_survey_completion",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurveyanswer",
            name="enrollment_question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="answers",
                to="course.enrollmentsurveyquestion",
            ),
        ),
        migrations.AddField(
            model_name="enrollmentsurvey",
            name="questions",
            field=models.ManyToManyField(related_name="enrollment_surveys", to="course.enrollmentsurveyquestion"),
        ),
        migrations.AddField(
            model_name="milestone",
            name="badge_class",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="milestones",
                to="badges.badgeclass",
            ),
        ),
        migrations.AddField(
            model_name="milestone",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="milestones", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="milestoneprogress",
            name="badge_assertion",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="progresses",
                to="badges.badgeassertion",
            ),
        ),
        migrations.AddField(
            model_name="milestoneprogress",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="progresses", to="course.course"
            ),
        ),
        migrations.AddField(
            model_name="milestoneprogress",
            name="milestone",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="progresses",
                to="course.milestone",
            ),
        ),
        migrations.AddField(
            model_name="milestoneprogress",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="progresses", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="milestoneprogressblock",
            name="block",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="learning_library.block"),
        ),
        migrations.AddField(
            model_name="milestoneprogressblock",
            name="milestone_progress",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="course.milestoneprogress"),
        ),
        migrations.AddField(
            model_name="milestoneprogress",
            name="blocks",
            field=models.ManyToManyField(through="course.MilestoneProgressBlock", to="learning_library.block"),
        ),
        migrations.AddField(
            model_name="notice",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="notices", to="course.course"
            ),
        ),
        migrations.AlterOrderWithRespectTo(
            name="notice",
            order_with_respect_to="sequence",
        ),
        migrations.AlterUniqueTogether(
            name="cohortmembership",
            unique_together={("cohort", "student")},
        ),
        migrations.AlterUniqueTogether(
            name="cohort",
            unique_together={("course", "slug")},
        ),
        migrations.AlterUniqueTogether(
            name="course",
            unique_together={("slug", "run")},
        ),
        migrations.AlterUniqueTogether(
            name="coursepassed",
            unique_together={("course", "student")},
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together={("student", "course")},
        ),
        migrations.AlterUniqueTogether(
            name="enrollmentsurveycompletion",
            unique_together={("enrollment_survey", "student")},
        ),
        migrations.AlterUniqueTogether(
            name="milestone",
            unique_together={("course", "slug")},
        ),
        migrations.AlterUniqueTogether(
            name="milestoneprogress",
            unique_together={("milestone", "student")},
        ),
    ]
