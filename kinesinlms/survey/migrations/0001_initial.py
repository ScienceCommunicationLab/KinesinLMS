# Generated by Django 5.0.6 on 2024-08-05 10:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("course", "0001_initial"),
        ("learning_library", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SurveyEmail",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("scheduled_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("UNPROCESSED", "unprocessed"), ("SENT", "sent"), ("ERROR", "error")],
                        default="UNPROCESSED",
                        max_length=250,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SurveyProvider",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the survey provider. (This is for your use and can be anything you want.)",
                        max_length=50,
                    ),
                ),
                ("type", models.CharField(choices=[("QUALTRICS", "Qualtrics")], default="QUALTRICS", max_length=50)),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Enable survey provider. If disabled, surveys associated with this provider will not be available.",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Slug identifier for provider (used in e.g. course json imports).",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "datacenter_id",
                    models.CharField(
                        blank=True,
                        help_text="Data center ID, if survey provider defines one (e.g. Qualtrics.)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "callback_secret",
                    models.CharField(
                        blank=True,
                        help_text="Secret used by remote survey provider to call webhooks on KinesinLMS.",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("BASIC", "basic"),
                            ("PRE_COURSE", "pre-course"),
                            ("POST_COURSE", "post-course"),
                            ("FOLLOW_UP", "follow-up"),
                        ],
                        default="PRE_COURSE",
                        help_text="The survey type helps indicate the purpose of the survey and roughly where it appears in the course (but actual position is determined by you in the course structure and not by this setting). The type also determines when a reminder email is sent if 'Send reminder email' is checked.",
                        max_length=50,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name to display above the survey when shown to a student in the course or in a reminder email.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "send_reminder_email",
                    models.BooleanField(
                        default=True,
                        help_text="Send a reminder email. (Email will be sent after a certain time if days_delay is set to something other than 0.)",
                    ),
                ),
                (
                    "days_delay",
                    models.IntegerField(
                        default=0,
                        help_text="How many days to wait before sending the reminder email. Otherwise, the email will be sent on the day the SurveyEmail is created.",
                    ),
                ),
                (
                    "survey_id",
                    models.CharField(
                        blank=True,
                        help_text="The ID for the survey in the third-party service that provides it.",
                        max_length=50,
                        null=True,
                        verbose_name="Survey ID",
                    ),
                ),
                ("index", models.IntegerField(blank=True, null=True)),
                (
                    "url",
                    models.URLField(
                        help_text="Public URL for the survey. This is used to render the survey in a course unit."
                    ),
                ),
                (
                    "include_uid",
                    models.BooleanField(
                        default=False, help_text="Include the student's anonymous ID in the survey URL."
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="surveys", to="course.course"
                    ),
                ),
            ],
            options={
                "ordering": ["index"],
            },
        ),
        migrations.CreateModel(
            name="SurveyBlock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "block",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="survey_block",
                        to="learning_library.block",
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="survey_blocks", to="survey.survey"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SurveyCompletion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("times_completed", models.IntegerField(default=0)),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="completions", to="survey.survey"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
