import logging
from dataclasses import dataclass
from enum import Enum
from typing import Optional

from django.contrib.auth import get_user_model
from django.db import models

from kinesinlms.composer.constants import HTMLEditMode
from kinesinlms.core.models import Trackable
from kinesinlms.course.constants import NodeType
from kinesinlms.course.models import Course

logger = logging.getLogger(__name__)


class EditMode(Enum):
    EDIT = "edit"
    LOCKED = "locked"


User = get_user_model()


@dataclass
class CourseMetaConfig:
    # Use these flags to indicate you want a slug to
    # be autogenerated (as a UUID, which is what composer will use)
    autogenerate_block_slugs: bool = True
    autogenerate_assessment_slugs: bool = True

    auto_number_module_content_index: bool = True
    start_module_content_index: int = 0

    auto_number_section_content_index: bool = True
    start_section_content_index: int = 1

    auto_number_unit_content_index: bool = True
    start_unit_content_index: int = 1

    add_assessment_unit_block_slugs: bool = False
    # Initially, the first index to start numbering assessments
    # in the course_unit table. This value is incremented
    # during course load.

    assessment_index: int = 1

    def auto_content_start_index(self, node_type: NodeType) -> Optional[int]:
        if node_type == NodeType.MODULE.name:
            if self.auto_number_module_content_index:
                return self.start_module_content_index
            else:
                return None
        elif node_type == NodeType.SECTION.name:
            if self.auto_number_section_content_index:
                return self.start_section_content_index
            else:
                return None
        elif node_type == NodeType.UNIT.name:
            if self.auto_number_unit_content_index:
                return self.start_unit_content_index
            else:
                return None
        elif node_type == NodeType.ROOT.name:
            return 0
        else:
            logger.warning(f"auto_content_start_index(): Unrecognized node_type: {node_type}")
            return None


class EditStatus(Trackable):
    course = models.OneToOneField(Course,
                                  null=True,
                                  related_name="edit_status",
                                  on_delete=models.CASCADE)

    mode = models.CharField(null=False,
                            max_length=30,
                            blank=False,
                            default=EditMode.LOCKED,
                            choices=[(item.name, item.value) for item in EditMode])


class ComposerSettings(models.Model):
    """
    Hold user's settings for the composer.
    """

    user = models.OneToOneField(User,
                                on_delete=models.CASCADE,
                                related_name="composer_settings")

    html_edit_mode = models.CharField(null=False,
                                      max_length=30,
                                      blank=False,
                                      default=HTMLEditMode.TINY_MCE.name,
                                      choices=[(item.name, item.value) for item in HTMLEditMode],
                                      help_text="Author edit mode for text fields.")

    @property
    def wysiwyg_active(self) -> bool:
        return self.html_edit_mode == HTMLEditMode.TINY_MCE.name
    
    @wysiwyg_active.setter
    def wysiwyg_active(self, value: bool):
        self.html_edit_mode = HTMLEditMode.TINY_MCE.name if value else HTMLEditMode.RAW.name 
        self.save()
