# Generated by Django 5.0.6 on 2024-08-05 10:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import kinesinlms.users.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("course", "0001_initial"),
        ("management", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Prospect",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                ("name", models.CharField(blank=True, max_length=200, null=True, verbose_name="Name")),
                ("institution", models.CharField(blank=True, max_length=200, null=True, verbose_name="Institution")),
                (
                    "source",
                    models.CharField(
                        help_text="Internal source for this prospect, e.g. download resource view.", max_length=50
                    ),
                ),
                (
                    "consent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Consent tosubmitted data being collected and stored.",
                        null=True,
                        verbose_name="Consent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("name", models.CharField(blank=True, max_length=500, null=True, verbose_name="Name of user")),
                (
                    "informal_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="What shall we call you (for example, when we send you mail)?",
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "is_test_user",
                    models.BooleanField(
                        default=False, help_text="Flag this user as a tester. Don't count interactions in analytics."
                    ),
                ),
                ("anon_username", models.UUIDField(default=uuid.uuid4)),
                (
                    "career_stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("b", "Undergraduate"),
                            ("m", "Master's or professional degree"),
                            ("p", "Doctorate"),
                            ("r", "Postdoctoral researcher"),
                            ("e", "Early career faculty member (pre-tenure)"),
                            ("n", "Non - tenure track faculty member"),
                            ("t", "Tenured faculty"),
                            ("rss", "Researcher / staff scientist"),
                            ("a", "Administrator"),
                            ("s", "Professional development / career development staff"),
                            ("o", "Other"),
                        ],
                        help_text="Career stage",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FEMALE", "Female"),
                            ("MALE", "Male"),
                            ("NON_BINARY", "Non-binary"),
                            ("NOT_LISTED", "Not listed"),
                            ("PREFER_NOT_TO_ANSWER", "Prefer not to answer"),
                        ],
                        help_text="Gender",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "gender_description",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="Gender description"),
                ),
                (
                    "year_of_birth",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            kinesinlms.users.models.max_value_current_year,
                        ],
                        verbose_name="Year of birth",
                    ),
                ),
                (
                    "why_interested",
                    models.TextField(blank=True, null=True, verbose_name="Why interested in this website"),
                ),
                ("agree_to_honor_code", models.BooleanField(default=False, verbose_name="Agree to Honor Code")),
                (
                    "email_automation_provider_user_id",
                    models.CharField(
                        blank=True,
                        help_text="The ID for the user in the email automation provider, (if one exists).",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="InviteUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                ("email_sent_date", models.DateTimeField(blank=True, null=True)),
                ("registered_date", models.DateTimeField(blank=True, null=True)),
                (
                    "cohort",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="invited_users", to="course.cohort"
                    ),
                ),
                (
                    "manual_enrollment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invited_users",
                        to="management.manualenrollment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "enable_badges",
                    models.BooleanField(
                        default=True,
                        help_text="Enable badges for 'course passed' and other milestone achievements.",
                        verbose_name="Enable badges",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
