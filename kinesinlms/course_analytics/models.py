from typing import List

from django.conf import settings
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db import models

from kinesinlms.core.constants import TaskResult
from kinesinlms.core.models import Trackable
from kinesinlms.course.models import Course
from kinesinlms.course_analytics.utils import ModuleInfo, StudentModulesProgress

# Create your models here.


class StudentProgressReport(Trackable):
    """
    This model tracks the status of an async task
    launched to calculate student progress. It also
    holds the results.

    These instances are meant to be deleted each time
    a user runs a new report.
    """

    class Meta:
        get_latest_by = "updated_at"

    # We store the user and cohort so that we can make sure to remove any
    # existing reports for a user when they run a new one
    # (to avoid taking up DB space)

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        blank=False,
        null=False,
        related_name="student_progress_reports",
        on_delete=models.CASCADE,
    )

    # We need direct reference to course when cohort is None
    course = models.ForeignKey(Course, null=True, related_name="student_progress_reports", on_delete=models.CASCADE)

    # When this is blank, it means all cohorts user has access to in this course.
    cohort = models.ForeignKey(
        "course.Cohort", null=True, blank=True, on_delete=models.CASCADE, related_name="student_progress_reports"
    )

    celery_task_id = models.CharField(max_length=50, null=True, blank=True)

    task_result = models.CharField(
        max_length=50,
        choices=[(tag.name, tag.value) for tag in TaskResult],
        default=TaskResult.UNGENERATED.name,
        null=False,
        blank=False,
    )

    generation_date = models.DateTimeField(null=True, blank=True)

    percent_complete = models.IntegerField(
        default=0, null=False, blank=False, validators=[MinValueValidator(1), MaxValueValidator(100)]
    )

    # Generation message can be either informative
    # or some error information (depending on generation_result state)
    task_message = models.TextField(null=True, blank=True)

    # The following two JSON fields store the information contained in the
    # two dataclasses generated by the task.

    modules_info_json = models.JSONField(null=True, blank=True)

    students_modules_progresses_json = models.JSONField(null=True, blank=True)

    num_students = models.IntegerField(default=0, null=False, blank=False)

    @property
    def modules_info(self) -> List[ModuleInfo]:
        if not self.modules_info_json:
            return []
        data = [ModuleInfo.from_dict(item) for item in self.modules_info_json]
        return data

    @property
    def students_modules_progresses(self) -> List[ModuleInfo]:
        if not self.students_modules_progresses_json:
            return []
        data = [StudentModulesProgress.from_dict(item) for item in self.students_modules_progresses_json]
        return data
