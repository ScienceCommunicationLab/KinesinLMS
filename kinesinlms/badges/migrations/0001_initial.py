# Generated by Django 5.0.6 on 2024-08-05 10:04

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BadgeAssertion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "creation_status",
                    models.CharField(
                        choices=[
                            ("STAGED", "staged"),
                            ("IN_PROGRESS", "in progress"),
                            ("COMPLETE", "complete"),
                            ("FAILED", "failed"),
                        ],
                        default="STAGED",
                        help_text="Status of badge assertion creation. See BadgeAssertionCreationStatus for possible states.",
                        max_length=20,
                    ),
                ),
                ("issued_on", models.DateTimeField(null=True)),
                (
                    "open_badge_id",
                    models.URLField(blank=True, help_text="URL to the badge assertion viewing page", null=True),
                ),
                (
                    "badge_image_url",
                    models.URLField(blank=True, help_text="URL to the badge assertion image", null=True),
                ),
                (
                    "external_entity_id",
                    models.CharField(
                        blank=True,
                        help_text="The ID of this assertion in the external service",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.CharField(
                        blank=True, help_text="Error message from external badge service", max_length=300, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BadgeClass",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=100, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("COURSE_PASSED", "Passed Course"), ("MILESTONE", "Course Milestone")],
                        default="COURSE_PASSED",
                        help_text="Type of badge class using the BadgeClassType enum. There can only be one COURSE_PASSED type per course.",
                        max_length=30,
                    ),
                ),
                ("name", models.CharField(blank=True, help_text="Badge display name", max_length=400, null=True)),
                (
                    "external_entity_id",
                    models.CharField(
                        help_text="The ID of this badge class in the external service (used for API calls).",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "open_badge_id",
                    models.URLField(
                        blank=True, help_text="URL of badge class definition in external badge service", null=True
                    ),
                ),
                (
                    "image_url",
                    models.URLField(
                        blank=True, help_text="URL of image graphic for badge in external badge service", null=True
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, help_text="Short description of badge", max_length=500, null=True),
                ),
                ("criteria", models.TextField(blank=True, help_text="Criteria for earning badge", null=True)),
            ],
            options={
                "verbose_name_plural": "badge classes",
            },
        ),
        migrations.CreateModel(
            name="BadgeProvider",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("active", models.BooleanField(default=True, help_text="Enable badge provider.")),
                (
                    "name",
                    models.CharField(blank=True, help_text="External badge provider name", max_length=200, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("BADGR", "Badgr")],
                        default="BADGR",
                        help_text="The type of badge provider",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, help_text="Slug for external badge provider", max_length=40, null=True
                    ),
                ),
                ("api_url", models.URLField(blank=True, help_text="External badge provider API url", null=True)),
                (
                    "salt",
                    models.CharField(
                        blank=True,
                        help_text='"salt" key for hashing external badge provider badge',
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "issuer_entity_id",
                    models.CharField(
                        blank=True, help_text="Our KinesinLMS entity ID on this service", max_length=50, null=True
                    ),
                ),
                (
                    "access_token",
                    models.CharField(
                        blank=True, help_text="Badge provider API access token.", max_length=200, null=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, help_text="Badge provider API refresh token.", max_length=200, null=True
                    ),
                ),
            ],
        ),
    ]
