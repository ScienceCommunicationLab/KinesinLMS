# Generated by Django 5.0.6 on 2024-08-05 10:04

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django_react_templatetags.mixins
import taggit.managers
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("course", "0001_initial"),
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
    ]

    operations = [
        migrations.CreateModel(
            name="Resource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("GENERIC", "Generic"), ("IMAGE", "Image"), ("VIDEO_TRANSCRIPT", "Video transcript")],
                        default="IMAGE",
                        max_length=50,
                    ),
                ),
                ("resource_file", models.FileField(upload_to="block_resources")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A short description of the resource. If this is an image, the description will be used as the alt text.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("VIDEO", "Video"),
                            ("HTML_CONTENT", "HTML Content"),
                            ("FILE_RESOURCE", "File Resource"),
                            ("CALLOUT", "Callout"),
                            ("ANSWER_LIST", "Answer List"),
                            ("ASSESSMENT", "Assessment"),
                            ("FORUM_TOPIC", "Forum Topic"),
                            ("SIMPLE_INTERACTIVE_TOOL", "Simple interactive tool"),
                            ("SURVEY", "Survey"),
                            ("EXTERNAL_TOOL_VIEW", "External tool view"),
                        ],
                        default="HTML_CONTENT",
                        max_length=50,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="A text header to be shown at the top of the block. (Only some block types display this field.)",
                        max_length=400,
                        null=True,
                    ),
                ),
                (
                    "hide_display_name",
                    models.BooleanField(default=False, help_text="Always hide this block's display name."),
                ),
                (
                    "short_description",
                    models.TextField(
                        blank=True,
                        help_text="A short description of the unit to be used when listing blocks outside of course or for staff composing a course. This description is not usually shown in an actual course unit.",
                        null=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        blank=True,
                        help_text="A slug for this block.The main use of a slug here is simple indication of purpose of block, both for students (when seen in a URL for this block if its available in the learning library) and for admins (when viewing event data in event objects).",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "course_only",
                    models.BooleanField(
                        default=False,
                        help_text="Set this flag to tru to prevent this block from appearing anywhere outside of the courses it appears in. (i.e. don't allow to appear as item in learning library)",
                    ),
                ),
                (
                    "enable_template_tags",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        help_text="Enables a limited number of template tags in this model's html_content field.",
                    ),
                ),
                (
                    "html_content",
                    models.TextField(
                        blank=True,
                        help_text="HTML content for this block. For most blocks, when this field is defined, the contents are just rendered into a template when a unit page is constructed for a student.",
                        null=True,
                    ),
                ),
                (
                    "html_content_type",
                    models.CharField(
                        choices=[("HTML", "HTML"), ("MARKDOWN", "Markdown"), ("PLAIN_TEXT", "Plain text")],
                        default="HTML",
                        max_length=50,
                    ),
                ),
                (
                    "json_content",
                    models.JSONField(
                        blank=True,
                        help_text="JSON content for this block. This holds different data depending on the block type.",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("DRAFT", "Draft"), ("PUBLISHED", "Published")], default="PUBLISHED", max_length=50
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                ("search_vector", django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            bases=(django_react_templatetags.mixins.RepresentationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="BlockLearningObjective",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("display_in_course", models.BooleanField(default=True)),
                ("display_in_learning_library", models.BooleanField(default=True)),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="block_learning_objectives",
                        to="learning_library.block",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LearningObjective",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(allow_unicode=True, max_length=200, unique=True)),
                (
                    "type",
                    models.CharField(choices=[("BLOCK", "block"), ("UNIT", "unit")], default="BLOCK", max_length=50),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "blocks",
                    models.ManyToManyField(
                        related_name="learning_objectives",
                        through="learning_library.BlockLearningObjective",
                        to="learning_library.block",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="blocklearningobjective",
            name="learning_objective",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="block_learning_objectives",
                to="learning_library.learningobjective",
            ),
        ),
        migrations.CreateModel(
            name="LibraryItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(choices=[("BLOCK", "block"), ("UNIT", "unit")], default="BLOCK", max_length=50),
                ),
                ("html_content", models.TextField(blank=True, null=True)),
                ("hidden", models.BooleanField(blank=True, default=False)),
                ("allow_pathway", models.BooleanField(blank=True, default=True)),
                (
                    "block",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_item",
                        to="learning_library.block",
                    ),
                ),
                (
                    "course_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_item",
                        to="course.courseunit",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlockResource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="block_resources",
                        to="learning_library.block",
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="block_resources",
                        to="learning_library.resource",
                    ),
                ),
            ],
            options={
                "unique_together": {("block", "resource")},
            },
        ),
        migrations.AddField(
            model_name="block",
            name="resources",
            field=models.ManyToManyField(through="learning_library.BlockResource", to="learning_library.resource"),
        ),
        migrations.CreateModel(
            name="UnitBlock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        blank=True,
                        help_text="A slug to represent this block in this particular unit.",
                        max_length=200,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="A label that should appear next to this block when rendered in this particular unit.",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "index_label",
                    models.CharField(
                        blank=True,
                        help_text="An index number that should appear next to this block when rendered in this particular unit.",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("block_order", models.PositiveIntegerField(default=0)),
                ("hide", models.BooleanField(default=False, help_text="Hide this block in in this particular unit.")),
                (
                    "read_only",
                    models.BooleanField(default=False, help_text="This block is read only in this particular unit."),
                ),
                (
                    "include_in_summary",
                    models.BooleanField(
                        default=False,
                        help_text="This block is included in any course summary pages (like 'My Responses' or 'Printable Review'.",
                    ),
                ),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unit_blocks",
                        to="learning_library.block",
                    ),
                ),
                (
                    "course_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="unit_blocks", to="course.courseunit"
                    ),
                ),
            ],
            options={
                "ordering": ["block_order"],
            },
        ),
        migrations.AddIndex(
            model_name="block",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="learning_li_search__1574a5_gin"
            ),
        ),
    ]
