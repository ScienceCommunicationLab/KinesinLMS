{"version":3,"file":"kinesinlms-composer.bundle.js","mappings":"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","sources":["webpack://kinesinlms/./kinesinlms/static/src/composer.ts"],"sourcesContent":["// Javascript for the composer app.\n// Note that it's assumed project.js will always be present and loaded before\n// this file, so we don't need to include here the libraries and styles\n// that are imported in project.js.\n\n\n// TODO: The current implementation is rough...and so lame. Refactor all of this to proper javscript modules.\n\nimport { update } from \"lodash\";\nimport { Simulate } from \"react-dom/test-utils\";\n\ndeclare const tinyMCE: any;\ndeclare const Alpine: any;\n\n\n// Set up HTMX for composer\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n/**\n *  Set up HTMX for composer.\n */\ndocument.body.addEventListener('htmx:configRequest', (event) => {\n\n    if (!event) {\n        console.error(\"htmx:configRequest event is null\", event);\n        return;\n    }\n\n    const customEvent: CustomEvent = event as CustomEvent;\n    const blockID: string = customEvent.detail.target.id;\n\n    if (blockID.includes(\"block-edit-form-\") || blockID.includes(\"course-unit-block-\")) {\n\n        // If this block has HTML_CONTENT or QUESTION_TEXT fields in it,\n        // and WYSIWYG is enabled, we need to make sure to run TinyMCE\n        // so that it collects rich text before calling the API.\n\n        if (!tinyMCE || !tinyMCE.activeEditor) {\n            console.log(\"We're editing raw HTML so no need to copy content from TinyMCE...\");\n            return;\n        }\n        console.log(\"Copying content from TinyMCE before making HTMx request...\");\n\n        const inputVarNames: string[] = [\"html_content\", \"question_text\"];\n\n        inputVarNames.forEach(inputVarName => {\n\n            const customEvent: CustomEvent = event as CustomEvent;\n            if (customEvent.detail && inputVarName in customEvent.detail.parameters) {\n                // Get the rich HTML and use it to replace the plain\n                // text that currently exists in the outgoing request...\n                const inputID = `id_${inputVarName}`;\n                const richContentEditor = tinyMCE.get(inputID);\n                if (!richContentEditor) {\n                    console.error(`Could not find element with ID ${inputID}`);\n                    return;\n                }\n                customEvent.detail.parameters[inputVarName] = richContentEditor.getContent();\n            }\n        })\n\n    }\n\n\n})\n\n\n// Set up Alpine data stores for composer\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n/** Set up Alpine data stores for composer. */\ndocument.addEventListener('alpine:init', () => {\n    Alpine.store('isEditingBlock', false);\n    Alpine.store('isEditingCourseUnitInfo', false);\n    console.log(\"Alpine init\");\n})\n\n\n// Composer events\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n/**\n * Listen for HTMx event that a course unit's \"info\" form is\n * being edited. When this happens we want to disable other controls\n * on the page.\n */\n\ndocument.body.addEventListener('editCourseUnitInfoActivated', function (evt) {\n    console.log(\"editCourseUnitInfoActivated\", evt);\n    Alpine.store('isEditingCourseUnitInfo', true);\n    klmsToggleDisableReadOnlyBlockControls(true);\n});\n\ndocument.body.addEventListener('editCourseUnitInfoDeactivated', function (evt) {\n    console.log(\"editCourseUnitInfoDeactivated\", evt);\n    Alpine.store('isEditingCourseUnitInfo', false);\n    klmsToggleDisableReadOnlyBlockControls(false);\n});\n\n\ninterface editBlockPanelActivatedEvent extends Event {\n    detail: {\n        block_id: number;\n        current_panel_slug: string;\n        // Add other properties if needed\n    };\n}\n\n/**\n * Listen for HTMx event that indicates a block is\n * being edited in a block edit panel. When this happens we want to disable\n * other controls on the page.\n */\ndocument.body.addEventListener('editBlockPanelActivated', function (evt: Event) {\n    Alpine.store('isEditingBlock', true);\n    console.log(\"editBlockPanelActivated\", evt);\n    const eventDetail = (evt as editBlockPanelActivatedEvent).detail;\n    klmsInitPanelForm(eventDetail.block_id, eventDetail.current_panel_slug);\n    klmsToggleDisableReadOnlyBlockControls(true);\n});\n\n/**\n * Listen for HTMx event that indicates a block is\n * no longer being edited. When this happens we want to enable\n * other controls on the page.\n */\ndocument.body.addEventListener('editBlockPanelDeactivated', function (evt) {\n    Alpine.store('isEditingBlock', false);\n    klmsToggleDisableReadOnlyBlockControls(false);\n});\n\n/**\n * \n * klmsToggleDisableReadOnlyBlockControls()\n * \n * Toggle the disabled state and visual style of controls for read-only blocks.\n *\n * We do this when a block is being edited in a panel, and we want to turn off\n * all other controls so the user can focus on the block they're editing (and\n * the other controls don't get the page into a bad state).\n *\n * @param isDisabled - Boolean indicating whether to disable or enable the controls.\n *\n */\nfunction klmsToggleDisableReadOnlyBlockControls(isDisabled: boolean = false) {\n\n    console.log(\"Disabling read-only block controls: \", isDisabled)\n\n    // Disable course unit info controls\n    const editCourseUnitInfoButton: HTMLButtonElement | null = document.getElementById(\"btn-edit-course-unit-info\") as HTMLButtonElement;\n    if (editCourseUnitInfoButton) {\n        editCourseUnitInfoButton.classList.toggle(\"disabled\", isDisabled);\n    }\n\n    // Disable toggle WYSIWYG button\n    const toggleWYSIWYGButton: HTMLButtonElement | null = document.getElementById(\"btn-toggle-wysiwyg\") as HTMLButtonElement;\n    if (toggleWYSIWYGButton) {\n        toggleWYSIWYGButton.classList.toggle(\"disabled\", isDisabled);\n    }\n\n    // Disable add block buttons\n    const addBlockAtEndButton: HTMLButtonElement | null = document.getElementById(\"btn-add-block-end\") as HTMLButtonElement;\n    if (addBlockAtEndButton) {\n        console.log(\"Disabling add block at end button: \", addBlockAtEndButton);\n        addBlockAtEndButton.classList.toggle(\"disabled\", isDisabled);\n    }\n    const addBlockButtons: NodeListOf<Element> = document.querySelectorAll(\".connector-add-block-button\");\n    addBlockButtons.forEach(button => {\n        console.log(\"Disabling add block button: \", button);\n        button.classList.toggle(\"disabled\", isDisabled);\n    })\n\n    // Disable all header controls in read-only blocks.\n    const readOnlyBlocks: NodeListOf<Element> = document.querySelectorAll(\".block-edit-card-read-only\");\n    readOnlyBlocks.forEach(block => {\n        const querySelectors: string[] = [\n            \".btn-block-edit\",\n            \".btn-block-delete\",\n            \".btn-block-move-up\",\n            \".btn-block-move-down\",\n            \".connector-add-block-button\",\n        ];\n        querySelectors.forEach(selector => {\n            const control: HTMLElement | null = block.querySelector(selector) as HTMLElement;\n            if (control) {\n                console.log(\"Disabling control: \", control);\n                control.classList.toggle(\"disabled\", isDisabled);\n            }\n        })\n    })\n}\n\n/*\n* klmsUpdateTextWithNewImageURL()\n* If the user has dragged an image onto the editor, and we have\n* successfully create a new CourseResource on the server, it's time\n* to update the content in the editor with an image tag pointing to the\n* newly created resouce.\n* We have to do this in either raw HTML or TinyMCE, depending on which \n* is currently active.\n*/\n\nfunction klmsUpdateTextWithNewImageURL(imageURL: string) {\n    console.log(\"klmsUpdateTextWithNewImageURL: \", imageURL)\n\n    const newImageTag = `<img src=\"${imageURL}\" alt=\"image\" />`;\n    // We need a ref to the raw HTML textarea regardless of whether\n    // it or TinyMCE is active...\n    const htmlContentTAElem = document.getElementById(`id_html_content`) as HTMLTextAreaElement;\n\n    // Update either TinyMCE or raw HTML textarea with new image tag.\n    if (tinyMCE && tinyMCE.activeEditor) {\n        console.log(\"TinyMCE is active. Updating with img tag...\")\n        const activeEditor = tinyMCE.activeEditor;\n        const cursorPos = activeEditor.selection.getRng();\n        activeEditor.selection.setContent(newImageTag);\n        console.log(\"Dispatching 'change' event from \", activeEditor);\n    } else {\n        console.log(\"Raw HTML textarea is active. Updating with img tag...\")\n        if (!htmlContentTAElem) {\n            return;\n        }\n        const cursorPos = htmlContentTAElem.selectionStart;\n        const textBefore = htmlContentTAElem.value.substring(0, cursorPos);\n        const textAfter = htmlContentTAElem.value.substring(cursorPos);\n        htmlContentTAElem.value = `${textBefore}\\n${newImageTag}\\n${textAfter}`;\n    }\n\n    // Regardless of whether we're in TinyMCE or raw HTML, we need to\n    // dispatch a change event so that the form knows the content has changed.\n    console.log(\"Dispatching 'change' event from \", htmlContentTAElem);\n    // That change event should cause the Save/Done buttons to toggle\n    htmlContentTAElem.dispatchEvent(new Event('change', { bubbles: true }));\n\n}\n\nfunction klmsUploadCourseResourceFile(file: any, courseID: string, blockID: string) {\n    console.log(\"klmsUploadCourseResourceFile: \", file, courseID, blockID);\n    const formData = new FormData();\n    formData.append('resource_file', file);\n    formData.append('type', 'IMAGE');\n    // AJAX request to upload file\n    const xhr = new XMLHttpRequest();\n\n    // Extract CSRF token from the body tag's hx-headers attribute.\n    // We set it there for HTMx, and although we're not doing an HTMx\n    // request here, we can still get the token from the same place.\n    const csrfToken = document.body.getAttribute('hx-headers');\n    let token = '';\n    if (csrfToken) {\n        try {\n            const headers = JSON.parse(csrfToken);\n            token = headers['X-CSRFToken'] || '';\n        } catch (e) {\n            console.error('Failed to parse CSRF token:', e);\n        }\n    }\n    console.log(\"csrfToken: \", csrfToken);\n\n    const uploadURL = `/composer/course/${courseID}/block/${blockID}/upload_course_resource/`;\n    xhr.open('POST', uploadURL, true);\n    xhr.setRequestHeader('X-CSRFToken', token);\n    const errMessage = 'Error occurred during upload. Please try again, or manually add the resource on the \"Resources\" tab.';\n    xhr.onload = function () {\n        if (xhr.status === 201) {\n            const response = JSON.parse(xhr.responseText);\n            console.log(\"Upload successful: \", xhr.responseText);\n            const imageURL = response.resource_url;\n            klmsUpdateTextWithNewImageURL(imageURL);\n        } else {\n            window.alert(errMessage);\n            console.error('Upload failed:', xhr.status);\n        }\n    };\n    xhr.onerror = function () {\n        window.alert(errMessage);\n    };\n    xhr.send(formData);\n}\n\nfunction klmsHTMLContentOnDragEnter(event: DragEvent) {\n    console.log(\"klmsHTMLContentOnDragEnter\");\n    event.preventDefault();\n    event.stopPropagation();\n    const dropZoneElem = document.getElementById(\"image_drop_zone\") as HTMLTextAreaElement;\n    if (!dropZoneElem) {\n        return\n    }\n    dropZoneElem.classList.add('drag-drop-highlight');\n}\n\nfunction klmsHTMLContentOnDragOver(event: DragEvent) {\n    console.log(\"klmsHTMLContentOnDragOver\");\n    event.preventDefault();\n    event.stopPropagation();\n    const dropZoneElem = document.getElementById(\"image_drop_zone\") as HTMLTextAreaElement;\n    if (!dropZoneElem) {\n        return\n    }\n    dropZoneElem.classList.add('drag-drop-highlight');\n}\n\nfunction klmsHTMLContentOnDragLeave(event: DragEvent) {\n    console.log(\"klmsHTMLContentOnDragLeave\");\n    event.preventDefault();\n    event.stopPropagation();\n    const dropZoneElem = document.getElementById(\"image_drop_zone\") as HTMLTextAreaElement;\n    if (!dropZoneElem) {\n        return;\n    }\n    dropZoneElem.classList.remove('drag-drop-highlight');\n}\n\nfunction klmsHTMLContentOnDrop(event: DragEvent) {\n    console.log(\"klmsHTMLContentOnDrop\");\n    event.preventDefault();\n    event.stopPropagation();\n    const dropZoneElem = document.getElementById(\"image_drop_zone\") as HTMLTextAreaElement;\n    if (!dropZoneElem) {\n        return;\n    }\n    dropZoneElem.classList.remove('drag-drop-highlight');\n    console.log(\"dropZoneElem: \", dropZoneElem);\n    console.log(\"dropZoneElem.dataset: \", dropZoneElem.dataset);\n    const courseID = dropZoneElem.dataset.courseId;\n    const blockID = dropZoneElem.dataset.blockId;\n    console.log(\"drop event. blockID: \", blockID);\n    console.log(\"drop event. blockIcourseIDD: \", courseID);\n    const dt = event.dataTransfer;\n    if (dt && courseID && blockID) {\n        const files = dt.files;\n        console.log(\"files: \", files);\n        Array.from(files).forEach(file => {\n            console.log(\"uploading file: \", file);\n            klmsUploadCourseResourceFile(file, courseID, blockID);\n        });\n    }\n}\n\n\n/* \n*\n* initComposerImageDropZone()\n* \n* Allow the author to drag and drop images into the composer \n* textarea. This action will\n* 1) upload image and create a CourseResource instance\n* and\n* 2) have the image URL automatically added to the html content.\n*\n*/\n\nfunction klmsInitComposerImageDropZone() {\n\n    const dropZoneElem = document.getElementById(\"image_drop_zone\") as HTMLTextAreaElement;\n\n    if (!dropZoneElem) {\n        // This panel probs doesn't have an HTML Content field and the\n        // accompanying drop zone.\n        return;\n    }\n\n    // Remove any existing event listeners\n    dropZoneElem.removeEventListener(\"dragenter\", klmsHTMLContentOnDragEnter, false);\n    dropZoneElem.removeEventListener(\"dragover\", klmsHTMLContentOnDragOver, false);\n    dropZoneElem.removeEventListener(\"dragleave\", klmsHTMLContentOnDragLeave, false);\n    dropZoneElem.removeEventListener(\"drop\", klmsHTMLContentOnDrop, false);\n\n    // Prevent default drag behaviors\n    dropZoneElem.addEventListener(\"dragenter\", klmsHTMLContentOnDragEnter, false);\n    dropZoneElem.addEventListener(\"dragover\", klmsHTMLContentOnDragOver, false);\n    dropZoneElem.addEventListener(\"dragleave\", klmsHTMLContentOnDragLeave, false);\n    dropZoneElem.addEventListener(\"drop\", klmsHTMLContentOnDrop, false);\n\n}\n\n\n/* Panels */\n\n// TODO: Break out into separate modules and/or classes\n\n/**\n * klmsInitPanelForm()\n * \n * This function is called when a panel for editing a block has been \n * loaded via an HTMx call and is now being activated.\n *\n * It initializes the panel's form and sets up event listeners\n * to manage the \"Save\" and \"Done\" buttons disabled states, as well as the disabled\n * state of the tabs in the panel set.\n *\n * This is all in an effort to keep a user on a particular\n * pane AND tab until they've saved their work.\n */\nfunction klmsInitPanelForm(blockID: number, currentPanelSlug: string) {\n\n    // Get reference to form and submit button\n    const panelFormID: string = `panel-form-${blockID}-${currentPanelSlug}`;\n    const panelForm: HTMLFormElement = document.getElementById(panelFormID) as HTMLFormElement;\n    if (!panelForm) {\n        console.error(\"Could not find DOM element\", panelFormID);\n        return;\n    }\n\n    // Remove existing event listeners to avoid duplication\n    panelForm.removeEventListener('change', onPanelFormChange);\n    panelForm.removeEventListener('wysiwyg_change', onPanelFormChange);\n\n    // Some panels do not certain buttons, like the \"Save\" button.\n    const submitButtonID: string = `btn-save-panel-${blockID}-${currentPanelSlug}`;\n    const submitButton: HTMLButtonElement | null = document.getElementById(submitButtonID) as HTMLButtonElement;\n    if (submitButton) {\n        // Disable the submit button initially\n        submitButton.disabled = true;\n    } else {\n        console.info(\"Could not find DOM element\", submitButtonID);\n    }\n\n    const doneButtonID: string = `btn-done-panel-${blockID}-${currentPanelSlug}`;\n    const doneButton: HTMLButtonElement | null = document.getElementById(doneButtonID) as HTMLButtonElement;\n    if (doneButton) {\n        console.info(\"Could not find DOM element\", doneButtonID);\n    }\n\n    const cancelButtonID = `btn-cancel-panel-${blockID}-${currentPanelSlug}`;\n    const cancelButton: HTMLButtonElement | null = document.getElementById(cancelButtonID) as HTMLButtonElement;\n    if (!cancelButton) {\n        console.info(\"Could not find DOM element\", cancelButtonID);\n    }\n\n    // Serialize initial form data\n    const initialFormData: URLSearchParams = new URLSearchParams(new FormData(panelForm!) as any);\n\n    function onPanelFormChange(event: Event) {\n        console.log(\"Panel form changed! event: \", event);\n\n        // If user is using raw HTML content, we check to see if content has changed.\n        // But if they're using TinyMCE...not sure yet how to check for changes, so just assume\n        // content is different.\n\n        let hasChanged: boolean = true;\n        if (tinyMCE && tinyMCE.activeEditor) {\n            // Leave hasChanged as true. We'll always assume content has changed.\n        } else {\n            const currentFormData: URLSearchParams = new URLSearchParams(new FormData(panelForm) as any);\n            hasChanged = currentFormData.toString() !== initialFormData.toString();\n        }\n\n        // Enable/disable submit button based on form changes\n        if (submitButton) {\n            submitButton!.disabled = !hasChanged;\n        }\n        if (doneButton) {\n            doneButton!.disabled = hasChanged;\n        }\n        if (cancelButton) {\n            cancelButton!.classList.toggle(\"d-none\", !hasChanged);\n        }\n        // Enable/disable tabs on panelset\n        const buttons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(`#panel-navs-${blockID} button.nav-link`);\n\n        // Loop through each button and set the 'disabled' attribute\n        buttons.forEach(button => {\n            button.disabled = hasChanged;\n        });\n    }\n\n    // Check for changes in the form fields. When there's a change\n    // update the various UI elements in the panel and panel set accordingly.\n    panelForm.addEventListener('change', onPanelFormChange, false);\n    panelForm.addEventListener('wysiwyg_change', onPanelFormChange, false);\n\n    klmsInitComposerImageDropZone();\n\n}\n\nfunction klmsDestroyCurrentPanelForm(){\n    console.log(\"klmsDestroyCurrentPanelForm()\");\n    if (tinyMCE) {\n        console.log(\"Destroying TinyMCE...\");\n        tinyMCE.remove();\n    }\n}\n\n(window as any).klmsInitComposerImageDropZone = klmsInitComposerImageDropZone;\n(window as any).klmsHTMLContentOnDragEnter = klmsHTMLContentOnDragEnter;\n(window as any).klmsHTMLContentOnDragOver = klmsHTMLContentOnDragOver;\n(window as any).klmsHTMLContentOnDragLeave = klmsHTMLContentOnDragLeave;\n(window as any).klmsHTMLContentOnDrop = klmsHTMLContentOnDrop;\n(window as any).klmsDestroyCurrentPanelForm = klmsDestroyCurrentPanelForm;\n"],"names":["klmsToggleDisableReadOnlyBlockControls","isDisabled","console","log","editCourseUnitInfoButton","document","getElementById","classList","toggle","toggleWYSIWYGButton","addBlockAtEndButton","querySelectorAll","forEach","button","block","selector","control","querySelector","klmsHTMLContentOnDragEnter","event","preventDefault","stopPropagation","dropZoneElem","add","klmsHTMLContentOnDragOver","klmsHTMLContentOnDragLeave","remove","klmsHTMLContentOnDrop","dataset","courseID","courseId","blockID","blockId","dt","dataTransfer","files","Array","from","file","formData","FormData","append","xhr","XMLHttpRequest","csrfToken","body","getAttribute","token","JSON","parse","e","error","uploadURL","open","setRequestHeader","errMessage","onload","status","response","responseText","imageURL","newImageTag","htmlContentTAElem","tinyMCE","activeEditor","selection","getRng","setContent","cursorPos","selectionStart","textBefore","value","substring","textAfter","dispatchEvent","Event","bubbles","klmsUpdateTextWithNewImageURL","resource_url","window","alert","onerror","send","klmsUploadCourseResourceFile","klmsInitComposerImageDropZone","removeEventListener","addEventListener","detail","target","id","includes","inputVarName","customEvent","parameters","inputID","richContentEditor","get","getContent","Alpine","store","evt","eventDetail","currentPanelSlug","panelFormID","panelForm","onPanelFormChange","submitButtonID","submitButton","disabled","info","doneButtonID","doneButton","cancelButtonID","cancelButton","initialFormData","URLSearchParams","hasChanged","currentFormData","toString","klmsInitPanelForm","block_id","current_panel_slug","klmsDestroyCurrentPanelForm"],"sourceRoot":""}