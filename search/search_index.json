{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KinesinLMS","text":"<p>KinesinLMS is a simple open-source Learning Management System (LMS) built with the sole developer (or small team) in mind.</p> <p>It uses Django and tries hard to make it easy for you to understand how things are set up quickly and get the system going with minimal fuss, while remaining free to extend the app in novel ways. That's the intention, at least.</p> <p>Key features are:</p> <ul> <li>Simple: \"Just enough\" LMS to get you started on creating something interesting and engaging. It's not a   full-featured LMS, but has the basics you'll need as a starting point.</li> <li>Grokkable: A primary focus of KinesinLMS is to fit entirely inside one developer's head. It tries hard to avoid   complex frameworks and dependencies, to stick with convention, and to keep the codebase small and understandable.</li> <li>Forgettable: For those dependencies and infrastructure components that are necessary, KinesinLMS tries to use   basic, boring, tried-and-true dependencies. Boostrap for styling, only one postgres database, etc. When you forget   how a dependency or component works, it should be easy to look up and remember.</li> </ul> <p>These docs are an attempt to explain a bit about the architecture of the system, how to set it up and run it, and how to use some of the tools it provides, such as the course authoring tool \"Composer.\"</p>"},{"location":"CLA/","title":"Science Communication Labs Contributor License Agreement","text":"<p>Last Updated: July 26, 2024</p> <p>Thank you for your interest in contributing to our open source projects (\"Projects\"). This Contributor License Agreement (\"Agreement\") sets out the terms governing any source code, object code, bug fixes, configuration changes, tools, specifications, documentation, data, materials, feedback, information, or other works of authorship that you submit or have submitted in any form or manner to Science Communication Labs UG (\"SCL\", \"we\", or \"us\") with respect to the Projects (collectively, \"Contributions\").</p> <p>After you submit your first pull request, you will be asked to accept this CLA. It preserves our ability to license our software and documentation according to our terms. Changing the license may be necessary, for example, if the license is incompatible with a larger combined work, we want to lift some restrictions of the AGPL/Creative Commons license, or it turns out that someone is abusing the existing license in ways we don't yet know about. The lack of a formal contract would also lead to legal uncertainty for us and all users, as some contributors could later claim that their code was never intended as, or authorized to be used as a contribution. We reserve the right to update this Agreement (1) to reflect changes in our business entity, name or address, (2) for legal or regulatory reasons, or (3) to improve readability and to make clarifications that our community requests. If you have any questions about this Agreement, please contact us at contact@sciencecommunicationlab.org.</p> <p>You agree that the following terms apply to all of your past, present and future Contributions. Except for the rights and licenses granted in this Agreement, you retain all of your rights, title and interest in and to your Contributions. We ask that other authors also consent to this Agreement if you do not own the entire copyright in the Contributions you submit.</p> <p>If you agree not as an individual, but on behalf of your company, government, or other entity for which you are acting (e.g., as an employee or government official), then \"you\" means your entity, and you bind your entity to this Agreement. You warrant that you have the legal authority to enter into this Agreement.</p> <p>Copyright License. You hereby grant, and agree to grant, to SCL a non-exclusive, perpetual, irrevocable, worldwide, fully-paid, royalty-free, transferable right to reproduce, prepare derivative works of, publicly display, publicly perform, exploit and distribute your Contributions and such derivative works, with the right to sublicense the foregoing rights through multiple tiers of sublicensees, and to transfer the above rights to third parties, in any possible manner. For the avoidance of doubt, this includes the right to apply any license to the Contributions that SCL considers fit for the respective purpose as decided by SCL in its sole discretion, including other open-source, copyleft, and proprietary licenses.</p> <p>Patent License. You hereby grant, and agree to grant, to SCL an exclusive, perpetual, irrevocable, worldwide, fully-paid, royalty-free, transferable patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer your Contributions, where such license applies only to those patent claims licensable by you that are necessarily infringed by your Contributions alone or by combination of your Contributions with the Project to which such Contributions were submitted, with the right to sublicense the foregoing rights through multiple tiers of sublicensees, and to transfer the above rights to third parties, in any possible manner. For the avoidance of doubt, this includes the right to apply any license to the Contributions that SCL considers fit for the respective purpose as decided by SCL in its sole discretion, including other open-source, copyleft, and proprietary licenses.</p> <p>Moral Rights. To the fullest extent permitted under applicable law, you hereby waive, and agree not to assert, all of your \u201cmoral rights\u201d in or relating to your Contributions for the benefit of SCL, its assignees, and their respective direct and indirect sublicensees.</p> <p>Third Party Content/Rights. If your Contribution includes or is based on any source code, object code, bug fixes, configuration changes, tools, specifications, documentation, data, materials, feedback, information or other works of authorship that were not authored by you (\"Third Party Content\") or if you are aware of any third party intellectual property or proprietary rights associated with your Contribution (\u201eThird Party Rights\u201d), then you agree to include with the submission of your Contribution full details respecting such Third Party Content and Third Party Rights, including, without limitation, identification of which aspects of your Contribution contain Third Party Content or are associated with Third Party Rights, the owner/author of the Third Party Content and Third Party Rights, where you obtained the Third Party Content, and any applicable third party license terms or restrictions respecting the Third Party Content and Third Party Rights. For greater certainty, the foregoing obligations respecting the identification of Third Party Content and Third Party Rights do not apply to any portion of a Project that is incorporated into your Contribution to that same Project. You agree not to use any Third Party Content in your Contribution that is licensed under conditions that do not allow you to grant us the rights as described herein.</p> <p>Representations. You represent that, other than the Third Party Content and Third Party Rights identified by you in accordance with this Agreement, you are the sole author of your Contributions and are legally entitled to grant the foregoing licenses and waivers in respect of your Contributions. If your Contributions were created in the course of your employment with your past or present employer(s), you represent that such employer(s) has authorized you to make your Contributions on behalf of such employer(s) or such employer (s) has waived all of their right, title or interest in or to your Contributions.</p> <p>Disclaimer. To the fullest extent permitted under applicable law, your Contributions are provided on an \"as-is\" basis, without any warranties or conditions, express or implied, including, without limitation, any implied warranties or conditions of non-infringement, merchantability or fitness for a particular purpose. You are not required to provide support for your Contributions, except to the extent you desire to provide support.</p> <p>No Obligation. You acknowledge that SCL is under no obligation to use or incorporate your Contributions into any of the Projects. The decision to use or incorporate your Contributions into any of the Projects will be made at the sole discretion of SCL or its authorized delegates.</p> <p>Disputes. This Agreement shall be governed by and construed in accordance with the laws of Germany, without giving effect to its principles or rules regarding conflicts of laws, other than such principles directing application of German law, and the United Nations Convention on Contracts for the International Sale of Goods, CISG. The parties hereby submit to venue in, and jurisdiction of the courts located in Berlin, Germany for purposes relating to this Agreement. In the event that any of the provisions of this Agreement shall be held by a court or other tribunal of competent jurisdiction to be unenforceable, the remaining portions hereof shall remain in full force and effect.</p> <p>Assignment. You agree that SCL may assign this Agreement, and all of its rights, obligations and licenses hereunder.</p>"},{"location":"contributing/","title":"Contributing to KinesinLMS","text":"<p>Contributions to KinesinLMS are welcome. KinesinLMS is released under the AGPL license.</p> <p>Science Communication Lab requires any contributor to sign a \"contributor license agreement\" as part of any pull request. The CLA is located here https://github.com/sciencecommunicationlab/kinesinlms/docs/CLA.md</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#source-code","title":"Source Code","text":"<p>KinesinLMS is open source software. It is released under the GNU AGPLv3 license (see the License.md file at the top of the repository).</p>"},{"location":"license/#images","title":"Images","text":"<p>Most images included in KinesinLMS were created by the Science Communication Lab team, and are released under Creative Commons CC-By-4.0.</p> <p>However, some images used in the default styles and marketing pages are free resources from other sources. The licenses governing those images should be consulted if you plan to use them in your own site.</p> <p>All images are CC-By-4.0 unless noted below:</p> <ul> <li>marketing/static/marketing/images/community.png  : Some avatars used in this custom image by SCL are courtesy of FreeVector.com</li> <li>marketing/static/marketing/images/world-compass.png : Image courtesy of [Freepik] (https://www.freepik.com/free-vector/flat-map-compass-background_1581317.htm#query=compass%20rose&amp;position=4&amp;from_view=keyword&amp;track=ais_user&amp;uuid=9dfb7ea9-587d-4916-8da2-0c2706e5dc41)</li> <li>images/misc/nothing-here-1.jpg : Photo by Nicolas Lobos on Unsplash</li> </ul>"},{"location":"architecture/api/","title":"KinesinLMS API","text":"<p>KinesinLMS offers a limited set of API endpoints using Django Rest Framework. These endpoints could be easily extended, as DRF is powerful and flexible.</p> <p>There are two basic sets of API endpoints currently available:</p> <ol> <li>\"Internal\" endpoints: for components within KinesinLMS that need to access the site via API, such as    \"Simple Interactive Tool\" components, which load their initial data and submit student activity via API.</li> <li>\"Analytics\" endpoints: for the external applications that need analytics data.</li> </ol> <p>Both sets of endpoints are configured in the top-level <code>config/urls.py</code> module.</p>"},{"location":"architecture/api/#internal-endpoints","title":"Internal Endpoints","text":"<p>At the moment, the main use of \"internal\" API endpoints are the React-based video component and simple interactive tools that we load in a course unit page.</p> <p>Internal endpoints are configured in the Router under <code>router = routers.DefaultRouter()</code></p> <p>A call to an endpoint here starts with <code>/api/</code></p>"},{"location":"architecture/api/#analytics-endpoints","title":"Analytics Endpoints","text":"<p>Analytics endpoints are meant to be called by an external resource and therefore use the default token-based authentication provided by DRF.</p> <p>A call to an endpoint in this group starts with <code>/api/analytics/</code></p>"},{"location":"architecture/architecture_overview/","title":"Architecture Overview","text":"<p>KinesinLMS is an MVC-like application that follows the best practices established by the Django project and further refined by the CookieCutter Django project.</p> <p>It tries hard to keep the number of components in the system to a minimum to limit how much you, the developer, need to understand and manage:</p> <ul> <li>PostgreSQL for persistence, including JSON object storage and text search vectors.</li> <li>Redis for in-memory cache, including Celery support.</li> <li>Bootstrap for UI components. (Yes, excellence can be boring.)</li> <li>HTMx for 'hypermedia' AJAX interactions.</li> <li>React only where really needed. (Look at all those npm dependencies go. So many! It's like confetti! Whee!)</li> </ul> <p>Given how complex web application development has become, some industry experts have encouraged thinking critically about technological complexity and how to reduce it. As Ruby on Rails creator David Heinemeier Hansson extolled in a recent interview, \"Simpler. Simpler. We've gone through 40 years in the desert\u2026for necessary but temporary complexity\u2026we built bridges to get from A to B, and now we're at B and people haven't realized the bridges aren't necessary\u2026individual programmers can understand the entire system they're working on.\"</p> <p>KinesinLMS tries to be one of those simpler applications. Just enough LMS. If it's not, if it misses the mark, can you help make it so?</p>"},{"location":"architecture/architecture_overview/#rich-user-experience","title":"\"Rich\" User Experience","text":"<p>For more immediate and \"rich\" user experiences, two approaches are taken:</p> <ul> <li>Simple interactions are handled by HTMx and its 'hypermedia' approach. KinesinLMS prefers this to more involved frameworks like React, Angular or Svelte.</li> <li>However, in places where the user interface complexity is high, such as a custom drag-and-drop node diagram tool, React is used.</li> </ul>"},{"location":"architecture/architecture_overview/#postgressql-for-persistence","title":"PostgresSQL for Persistence","text":"<p>PostgreSQL is powerful. So rather than having a separate DB for an object store (e.g. Mongo) or a specialized tool for text searches (e.g. Elasticsearch), KinesinLMS uses PostgreSQL for everything.</p>"},{"location":"architecture/architecture_overview/#complex-features","title":"Complex Features","text":"<p>Complex features that would be hard to develop and manage internally are offloaded to external resources, which the developer is meant to set up and integrate via the KinesinLMS dashboard:</p> <ul> <li>forums are hosted on Discourse</li> <li>badges are hosted in Badgr.com</li> <li>surveys are hosted in Qualtrics</li> <li>email automations are hosted in ActiveCampaign.</li> </ul>"},{"location":"architecture/architecture_overview/#celery-and-asynchronous-queues","title":"Celery and Asynchronous Queues","text":"<p>Asynchronous queues are a great way to offload long processes so a web request can be returned quickly. (Want to learn more? Read this.)</p> <p>At the moment there aren't many processes in KinesinLMS that need to be offloaded to an asynchronous queue. In fact, at the time of writing there's just one in the course analytics section.</p> <p>However, you might find you'll need to use an async queue for a feature you're creating that takes a bit of time, especially as some platforms can limit web request time (Heroku limits requests to 30 seconds). In these cases, KinesinLMS recommends creating a Celery task to manage the long-running process.</p>"},{"location":"architecture/database/","title":"Database","text":"<p>Although Django supports multiple databases, KinesinLMS is designed to work with the PostgreSQL database. KinesinLMS uses some features of PostgreSQL that may not be available on other databases.</p> <ul> <li>JSON Field</li> <li>Full-text Search</li> </ul> <p>Although you could set up and manage your own PostgreSQL instance yourself, it sure is nice when a vendor platform handles that for you, including things like replication, failover, metrics, monitoring and daily snapshots. So consider that before you decide.</p>"},{"location":"architecture/email/","title":"Email","text":"<p>Emails are sent in a couple different ways and for a couple different purposes. KinesinLMS uses the basic email feature that comes with Django for system emails and for some course-specific tasks, like reminding students to fill out surveys.</p> <p>For more complex emails and email automations, KinesinLMS relies on a provider, like ActiveCampaign.</p> <p>For more information, visit the \"Email\" section of the docs:</p> <ul> <li>Survey Emails</li> <li>Email Automations</li> </ul>"},{"location":"architecture/env_variables/","title":"Environment Variables","text":"<p>Most configuration information is stored in the KinesinLMS database. However, some information that is secret and shouldn't be stored in the DB, is stored in the environment alongside the usual Django settings (following the still-relevant 12 Factor App conventions).</p> <p>The following environment variables should be configured if the user wants to use various services. For an example of how to set these variables, see the <code>env.example</code> file in the root of the project.</p>"},{"location":"architecture/env_variables/#email-service","title":"Email Service","text":"<p>To send email directly, Django must be configured with to use an email gateway. Most gateways use a token for API call authentication.</p> <pre><code>EMAIL_SERVICE_TOKEN=\"(some API key from email service)\"\n</code></pre> <p>Note</p> <p>Along with setting this environment variable, the correct variant of the AnyMail library must be set in <code>production.txt</code> requirements file, and AnyMail configured in production.py</p>"},{"location":"architecture/env_variables/#email-automation-provider","title":"Email Automation Provider","text":"<p>If an email automation provider is being used, most information will be stored in the EmailAutomationProvider model and updated through the KinesinLMS management panel.</p> <p>However, the following key should be set and stored in the environment:</p> <pre><code>EMAIL_AUTOMATION_PROVIDER_API_KEY=\"(some API key from email automation service)\"\n</code></pre>"},{"location":"architecture/env_variables/#survey-provider","title":"Survey Provider","text":"<p>If a survey provider is being used, most information will be stored in the SurveyProvider model and updated through the management panel.</p> <p>However, the following key should be set and stored in the environment:</p> <pre><code>SURVEY_PROVIDER_API_KEY=\"(some api key from survey provider)\"\n</code></pre>"},{"location":"architecture/env_variables/#forum-provider","title":"Forum Provider","text":"<p>If a forum provider is being used, most information will be stored in the ForumProvider model and updated through the management panel.</p> <p>However, the following keys should be set and stored in the environment:</p> <pre><code>FORUM_API_KEY=\"(some API key from forum provider service)\"\nFORUM_SSO_SECRET=\"(some SSO secret from forum provider service)\"\nFORUM_WEBHOOK_SECRET=\"(some webhook secret from forum provider service)\"\n</code></pre>"},{"location":"architecture/env_variables/#badge-provider","title":"Badge Provider","text":"<p>If a badge provider is being used, most information will be stored in the BadgeProvider model and updated through the management panel.</p> <p>However, the following should be set and stored in the environment:</p> <pre><code>BADGE_PROVIDER_USERNAME=\"(some username from badge provider service)\"\nBADGE_PROVIDER_PASSWORD=\"(some password from badge provider service)\"\n</code></pre>"},{"location":"architecture/env_variables/#other-integrations","title":"Other Integrations","text":"<p>If you use Sentry (highly recommended), set the DSN for your project in the SENTRY_DSN environment variable.</p> <pre><code>SENTRY_DSN=\"(some DSN from Sentry)\"\n</code></pre> <p>If you have recaptcha set up with Google, you can configure it with the following:</p> <pre><code>RECAPTCHA_USE_RECAPTCHA=False\nRECAPTCHA_PUBLIC_KEY=(some public key)\nRECAPTCHA_PRIVATE_KEY=(some private key)\n</code></pre>"},{"location":"architecture/env_variables/#other-env-variables","title":"Other Env Variables","text":"<p>For more infomation on other standard environment variables to configure Django and Celery, see the .env.example file in the root of the project.</p>"},{"location":"architecture/event_tracking/","title":"Event Tracking","text":""},{"location":"architecture/event_tracking/#event-tracking-requirements","title":"Event Tracking Requirements","text":"<p>A few simple requirements helped shape the way we're capturing and logging events.</p> <p>1) Handle Client or Server Origin: Most of the events we need to track can be captured and handled on the server. But    some we want to get directly from the client, for example video play and pause events from the YouTube player. So    we've created an API endpoint for our client components to send tracking event data.</p> <p>2) Delivery to 'Somewhere Else' for Handling: External services will want to do different things    based on events (e.g. send email, send a message to slack, etc.), and we're going to expect that this logic    lives somewhere else and not in the LMS. So we'll use Celery tasks to do async sends to...somewhere! You    can extend the Tracker class to implement logic to send your event to an external service.</p> <p>Note that events shouldn't contain personal information for a user. By convention, we only include the user's anonymous ID.</p>"},{"location":"architecture/event_tracking/#tracking-api-endpoint","title":"Tracking API endpoint","text":"<p>React components running in the client can send POST events to the <code>/api/tracking</code> endpoint to register events originating on the client. There's no library yet so each component just constructs its own POST request (See the VideoPlayer.tsx component for an example).</p> <p>For example, for video events the JSON payload looks like this:</p> <pre><code>{\n  \"tracking_event_type\": \"video\",\n  \"node_id\": this.state.nodeID,\n  \"event_data\": {\n    \"video_id\": this.state.videoID,\n    \"video_event_type\": videoEventType\n  }\n}\n</code></pre> <p>The <code>event_data</code> portion is the part that will change depending on the type of event. For video activity it's always just the two properties you see above.</p> <p>All validation of incoming events through the API is done by Django Rest Framework. Following best practice ('thick serializers, thin views`), the serializer itself handles calling the Tracker rather than saving a model instance. Perhaps in the future I'll refactor that logic into a helper class.</p>"},{"location":"architecture/event_tracking/#tracker-class","title":"Tracker Class","text":"<p>This class encapsulates the code necessary to send off an event to ... somewhere.</p> <p>It provides one method, <code>track</code>, which should be called from wherever something interesting happens that we want to track: a registration, an enrollment, an assessment entry, etc.</p> <p>The <code>track</code> function takes the following arguments:</p> <ul> <li><code>event_type</code> : An event type. Must be one of the constant strings defined in event_types.py</li> <li><code>user</code> : A user object, perhaps pulled from the request or from a model class.</li> <li><code>data</code> : A dictionary that takes on different properties depending on the <code>event_type</code></li> <li><code>course_content_node</code> : The course node this event took place in, if applicable (registration events don't have a   course node).</li> </ul>"},{"location":"architecture/event_tracking/#event-structure","title":"Event Structure","text":"<p>All events will have the following basic JSON shape.</p> <pre><code>{\n    \"event_type\": (some event type)\n    \"anon_username\": (anonymized username, from anon_username field in user model),\n    \"time\": (format like 2014-03-03T16:19:05.584523+00:00)\n    \"course_slug\": (course slug),\n    \"course_run\": (run),\n    \"module_id\": (module id),\n    \"section_id\": (section id),\n    \"unit_id\": (unit id),\n    \"page_url\": (the page URL)\n    \"event_data\": {\n        (All data related to this event type. Structure depends on event type...see definitions below.)\n    }\n\n}\n</code></pre>"},{"location":"architecture/event_tracking/#time","title":"time","text":"<p>This is the UTC time when the event was recorded. It will be in \u2018YYYY-MM-DDThh:mm:ss.xxxxxx\u2019 format.</p>"},{"location":"architecture/styles/","title":"Styles","text":"<p>KinesinLMS uses Bootstrap 5.3 for basic styles and layout.</p> <p>Additional styles are defined in the <code>kinesinlms/static/scss</code> directory. These styles are collected into one <code>project.scss</code> file, which is compiled into <code>kinesinlms/static/css/project.css</code> via sass.</p>"},{"location":"architecture/styles/#compiling-styles","title":"Compiling Styles","text":"<p>Prerequisite: You must have <code>sass</code> installed and availble on the command line.</p> <p>To compile the styles, run the following command from base project directory.</p> <pre><code>sass --watch kinesinlms/static/scss:kinesinlms/static/css --style compressed --load-path=node_modules\n</code></pre> <p>This command is also available in the <code>package.json</code> file as the <code>watch-styles</code> script. To run it from the root of the project, use:</p> <pre><code>npm run watch-styles\n</code></pre>"},{"location":"architecture/testing/","title":"Testing","text":"<p>Writing tests, ab crunches, broccoli, mindfulness meditation. All so important. All so better done next week.</p> <p>KinesinLMS has a basic set of tests, most of which are either unit or integration tests. Unit tests are usually based on the Django <code>TestCase</code> class and located in a <code>tests</code> folder in each app within the project. Integrations tests are mostly based on the <code>StaticLiveServerTestCase</code> class and located in the top-level tests folder. The integration tests usually run Selenium to drive the test interaction.</p> <p>All tests should be discovered when you run <code>pytest</code> from the top of the project. Pytest is configured by the <code>pytest.ini</code> file so you can change settings there as you see fit.</p> <p>It's probably a good idea to always create tests around any updates or changes you make to the code, and running tests locally and on your remote server when you update your KinesinLMS system. Dunno about rabid TDD but thoughtful tests are a good thing.</p> <p>A few articles to encourage your testing efforts:</p> <ul> <li>Testing in Django</li> <li>Testing in Django - Best Practices and Examples</li> <li>Django Testing Guide</li> <li>Obey the Testing Goat</li> </ul>"},{"location":"badges/badges_overview/","title":"Badges Overview","text":"<p>\"Open Badges\" are digital images (usually .png or .svg format) that encode accomplishments in a standardized format. Information about the accomplishment that earned that badge, including who earned it and the criteria involved, is cryptographically signed and embedded in the image.</p> <p>Using cryptography to encode this information allows the badge to be verified as authentic and to be shared reliably across the web. Badges can be displayed on social media, in email, on websites, and in digital portfolios. They can also be collected and displayed in a \"backpack\" or \"passport\" system, such as Badgr.com, Mozilla Backpack, or Open Badge Passport.</p> <p>The open badges architecture is governed by a published, evolving standard, currently at version 2.1.</p> <p>The use of badges as a reward system in online courses has been shown to encourage user interaction with courses and improve course completion rates.</p> <p>KinesinLMS provides a \"BadgeProvider\" class to define a third-party badge provider. At the moment, the only provider supported is Badgr.com.</p> <p>To award badges for things like course completion, you'll need to:</p> <ul> <li>create an account on Badgr.com</li> <li>create an \"issuer\" for your organization</li> <li>create one or more \"badge clasess\" under that issuer for the different badges you want to award.</li> </ul> <p>You then set up a BadgeProvider instance in KinesinLMS to represent the issuer.</p> <p>After than, you set up a BadgeClass instance in KinesinLMS for every badge class you created in Badgr, and associate that BadgeClass instance with a course and milestone (e.g. if a student reaches the \"course passed\" milestone for a course, they get a badge.)</p> <p>At the moment, KinesinLMS only supports awarding badges for course completion. However, the architecture is designed to be extensible, so it should be possible to add support for other types of badges in the future.</p> <p>More resources on Open Badges:</p> <ul> <li>What are Open Badges</li> <li>Getting Started with Open Badges and Open Microcredentials</li> <li>Open Badges</li> </ul>"},{"location":"badges/creating_badge_classes/","title":"Creating Badge Classes","text":"<p>You can create a badge class to represent an achievement in KinesinLMS. This badge class will be used to award a badge to students who complete a course. (Only 'course completion' achievement badges are supported at the moment.)</p> <p>In digital badges, each badge that a student can earn is represented by a \"badge class.\" You can think of a badge class as a template for a badge. It contains the information about the badge, such as the name, description, and criteria for earning it.</p> <p>When a student earns that badge, a \"badge assertion\" is made for that badge class. The badge assertion links the student to the achievement.</p>"},{"location":"badges/creating_badge_classes/#creating-a-badge-class-for-coures-completion","title":"Creating a Badge Class for Coures Completion","text":"<p>To create a badge for course completion, you'll need to have already set up a Badge Provider in the KinesinLMS admin panel. If you haven't done that yet, see the Badge Provider Integration documentation. You'll also need to have an account on Badgr.com and have set up an issuer for your KinesinLMS site.</p> <p>Remember that each badge class is really composed of two parts:</p> <ul> <li>A badge class created in the external badge provider (e.g. Badgr.com)</li> <li>A badge class instance set up in KinesinLMS</li> </ul>"},{"location":"badges/creating_badge_classes/#creating-the-badge-class-on-badgrcom","title":"Creating the Badge Class on Badgr.com","text":"<p>To create a badge class on Badgr.com, you'll need to log in to your Badgr.com account and then create a new badge class for your course. Make sure you create it under the issuer you used when creating the BadgeProvider in the previous step.</p> <p>Here's how to do that:</p> <ul> <li>Log in to your Badgr.com account</li> <li>Naviate to the correct issuer</li> <li>Click the \"Create Badge\" button</li> <li>Add a name for the badge, an image (make sure you have the correct usage rights for the image), a description of the   badge, and any earning criteria you want to add.</li> </ul> <p>You also must add a URL that points to a \"Criteria URL\" that explains the criteria for the badge in more detail. Every course in KinesinLMS has an automated, default \"Criteria URL\" that you can use for this purpose. The URL is in the format <code>https://(your website url)/catalog/(course slug)/(course run)/criteria/</code>. Or you can create your own special page with more criteria deatils and use that URL.</p> <p>Once you've created the badge class on Badgr.com, you'll need to copy the information from the badge class into a badge class on KinesinLMS.</p> <p>Open the badge class on Badgr.com and click the \"View JSON\" button at the bottom of the page. This will show you the badge class information in JSON form. You'll need to copy the information from a few fields in that JSON into a new badge class on KinesinLMS.</p> <ul> <li>The \"id\" of the badge. This is a full URL that represents the badge class. It will look something like   this: <code>https://api.badgr.io/public/badges/(long badge class ID string)</code></li> <li>The External Entity ID for the badge class. In Badgr's case, this is just the <code>(long badge class ID string)</code> portion of the \"id\" URL.</li> <li>The URL of the badge image. In Badgr's case, this is just like the Open Badge ID, with <code>/image</code> at the   end. <code>&lt;https://api.badgr.io/public/badges/some_long_badge_class_ID_string/image</code></li> </ul> <p></p>"},{"location":"badges/creating_badge_classes/#create-the-badge-class-on-kinesinlms","title":"Create the Badge Class on KinesinLMS","text":"<p>Now that you have a badge class created on Badgr and have gathered a few pieces of data, you need to create a badge class on KinesinLMS to represent it.</p> <p>View the Course Badges page in the \"Course authoring guide\" section for details on how to do this.</p>"},{"location":"badges/creating_badge_classes/#badge-criteria-page","title":"Badge Criteria Page","text":"<p>As mentioned above, every course has a default \"Criteria URL\" that you can use to explain the criteria for passing the course. You can use this URL in a \"passed course\"-type badge.</p> <p>Any criteria added to the badge class will be shown in the \"criteria\" box on this page.</p> <p>The page appears at the url: <code>https://(your website url)/catalog/(course slug)/(course run)/criteria/</code>.</p>"},{"location":"badges/creating_badge_classes/#user-status","title":"User Status","text":"<p>When the system is live and students are earning badges, you can see a complete list of earned badge assertions on the admin panel: <code>https://(your app url)/admin/badges/badgeassertion/</code></p>"},{"location":"badges/provider_integration/","title":"Badge Provider Integration","text":"<p>In order to award badges, you'll need to integrate with a third-party badge service. We've chosen to create an integration with Canvas Badgr, which is a free service that provides a simple API for awarding badges. KinesinLMS leverages that API when issuing a badge assertion for a student for something like passing a course. The <code>BadgrBadgeService</code> class implements these calls to the Badgr API.</p> <p>If you want to use a different badge service, you'll need to create a new subclass of the <code>BadgeService</code> class to implement the new service, and potentailly update or subclass <code>BadgeProvider</code> to match. You'll also need to add a new name and value pair to <code>BadgeProviderType</code> enum to represent your integration.</p>"},{"location":"badges/provider_integration/#setting-up-an-account-at-badgrcom","title":"Setting Up an Account at Badgr.com","text":"<p>You can create a free accont at Badgr.com here: https://badgr.com/auth/signup</p> <p>After you do, use the Badgr.com admin website to create an \"issuer\" for your KinesinLMS site. This issuer will own the badge assertions you create.</p> <p>You'll need the issuer \"ID\" in the next step. To get it, go to the \"public\" page for the issuer and then click \"View JSON\" button at the bottom of the page. This will show you the JSON for the issuer, and the \"id\" field is the full path for the issuer ID. It will look something like this: <code>https://api.badgr.io/public/issuers/(some long ID string)</code></p> <p>That final long string is the issuer \"ID\" and that's what you'll need in the next step. So copy just that string (not the whole URL) and hold on to it for the next step.</p>"},{"location":"badges/provider_integration/#setting-up-the-badge-provider","title":"Setting up the Badge Provider","text":"<p>Once you've created a new Badgr.com account and an issuer, you can set up your Badge Provider in the KinesinLMS admin panel.</p> <p>The first step is to set the two environment variables for your login credentials: BADGE_PROVIDER_USERNAME=(your username) BADGE_PROVIDER_PASSWORD=(your password)</p> <p>These should be secret, that's why we set them directly in the environment rather than storing them in the database.</p> <p>Then create a Badge Provider in the KinesinLMS management panel. Here's how:</p> <ol> <li>Go to the Badge Providers admin page: <code>https://(your app url)/management/badge_provider/</code></li> <li>Add \"My Badgr\" or something like that as the name of the provider.</li> <li>Set the \"type\" to \"Badgr\".</li> <li>Create a slug for this provider. <code>badgr</code> is a good choice.</li> <li>Set the \"api url\" to <code>https://api.badgr.io/</code></li> <li>Create a random \"salt\" string. If you don't have a reliable way for creating a random string, try typing the number keys real crazy like.</li> <li>Add the issuer ID from the last step in the \"Issuer entity ID\" field</li> </ol> <p>You can leave the \"Access token\" and \"Refresh token\" fields blank for now. They will be filled in automatically when the badge provider first accesses the Badgr API.</p>"},{"location":"badges/provider_integration/#creating-badge-classes","title":"Creating Badge Classes","text":"<p>Now that you have a connection with Badgr, you can set up what are called \"badge classes\" to represent achievements. Badge classes are represented in KinesinLMS with the <code>BadgeClass</code> model.</p> <p>Read the Creating Badge Classes documentation for more information on how to set up a badge class for course completion.</p>"},{"location":"course/block_resources/","title":"Block Resources","text":"<p>Block resources are files that are used to supplement a Block's main content. They are uploaded by the course author and used either directly in the Block's html content. For example, a .png image file can be a block resource to an HTML Block, while a video transcription .txt file can be a resource for a VideoBlock.</p>"},{"location":"course/block_resources/#block-resource-types","title":"Block Resource Types","text":"<p>There are only three types of block resources at the moment:</p> <ul> <li>IMAGE (for a Block's HTML content)</li> <li>VIDEO_TRANSCRIPT (for a VideoBlock)</li> <li>GENERIC (for various uses, e.g. the \"File Resource\" block that provides a file download for a student.)</li> </ul> <p>Block resource information is stored in the Resource model, and the file itself is stored in the Django media folder via the model's <code>resource_file</code> property. The resource is linked into one or more Blocks where it is used via the BlockResource join model...this allows one resource to be used in multiple Blocks across different courses. Each Resource instance gets a unique uuid.</p> <p>When possible, the author should try to re-use an existing Resource rather than upload the same resource multiple times when authoring a course.</p>"},{"location":"course/block_resources/#resources-during-course-import","title":"Resources During Course Import","text":"<p>When importing a course, if the uuid of a resource contained in the imported course archive already exists in the database, the existing Resource is used.</p> <p>If the uuid does not exist, a new Resource is created, even if a resource with the same name already exists in the media folder. (In the case the file name will be updated to be unique.)</p>"},{"location":"course/blocks/","title":"Blocks","text":"<p>Blocks are types of content you add to a Unit. When you author a course in Composer, you build up each unit's content by adding various blocks and arranging them so they appear in the right order when the unit web page is shown the user.</p> <p>KinesinLMS only has a small set of block types at the moment, but we hope to create more type in the future to support different kinds of learning interactions.</p> <p>Current block types include the following:</p> <ul> <li>\"HTML content\" : A simple block to hold HTML content. Composer provides a rich editor if you don't want to write HTML code by hand.</li> <li>\"Video\" : Display a video in a video player. (Currently only YouTube is supported.)</li> <li>\"File Resource\": Allows you to display a file to a user for download.</li> <li>\"Callout\": A simple content block that provides a bit of graphical treatment to highlight the content.</li> <li>\"Assessment\": A block that provides an assessment to the user: text entry, multiple choice, etc.</li> <li>\"Forum Topic\": Provides a link to a forum topic in the remote forum provider. (Shows some of the recent entries from the topic to encourage engagement.)</li> <li>\"Survey\": Display a survey from the survey provider directly in the unit.</li> <li>\"Simple Interative tool\": Displays an interactive activity.</li> <li>\"External Tool\" (IN DEVELOPMENT): Displays an external e-Learning tool via the Learning Tools Interoperability (LTI) standard.</li> </ul>"},{"location":"course/course_overview/","title":"Course Overview","text":"<p>A \"course\" in KinesinLMS is a series of \"Units.\" A unit is essentially one web page of content.</p> <p>Each unit is composed of multiple content \"blocks,\" which can have different types of content: videos, html text, assessments and so on. This is essentially how most LMS applications are set up. (A student might not notice that a unit is made up of blocks...for them the set of blocks in a unit appear as one web page.)</p> <p>Units in a course are organized into \"Sections,\" which are further grouped in \"Modules.\" This grouping provides students with a logical content structure and a method of navigation. It also allows you the author to segment portions of course content according to various rules (e.g. content in Module 2 is not available until a certain date).</p> <p>When you author a course in the Composer tool, you'll build up your modules, sections and units and then add content to each unit by adding one or more blocks.</p> <p>Other aspects of the course, such as enrollment open date or course start date, are also configured in Composer.</p>"},{"location":"course_authoring_guide/catalog_info/","title":"Adding Catalog Info to a Course","text":""},{"location":"course_authoring_guide/course_authoring_guide_overview/","title":"Course Authoring Overview","text":"<p>KinesinLMS has a simple authoring feature called \"Composer.\" You can use this feature to create a course, add content to it, then make the course visible in the catalog.</p> <p>Your user is given access to the Composer feature if they have been added to the <code>AUTHOR</code> group, or if your user is marked  <code>staff</code> or <code>superuser</code>. You'll see a link to \"Composer\" in the top nav if this is the case.</p> <p>Note</p> <p>Remember that the primary way you add a user to a group in Django is to open their user in the admin panel and then scroll down to the \"Groups\" control and add the group there. So use this process when you want to add a user to the <code>AUTHOR</code> group to give them access to Composer.</p> <p>Composer is still a bit rough, but it should allow you to build up a full course by 1) creating a navigation structure of modules, sections and units, and then 2) adding different types of blocks to each unit.</p> <p>Currently, the only allowed navigation structure is module / section / unit, but in the future KinesinLMS should support other configurations, such as a two-tiered module / unit stucture.</p>"},{"location":"course_authoring_guide/course_badges/","title":"Course Badges","text":"<p>You can award a badge to a student who has completed a course. When a student passes a course, a downloadable badge will appear in their \"Progress\" tab. If the course awards certificates, the badge will appear next to it.</p> <p>Before adding a \"course passed\" badge to a course, you must have already</p> <ol> <li>Created a badge provider. See Badge Provider Integration</li> <li>Set up the badge classes in the remote provider (e.g. Badgr.com). See Create Badge Classes</li> <li>Make sure you have a \"course passed\" milestone or milestones set for your course. See Course Milestones</li> </ol> <p>Remember to keep the information from the badges in the remote provider handy, as you'll need to copy that information into the \"add badge class\" form.</p> <p>If you've done all that, you're ready to create a badge class for this course that links to the badge you created in the remote provider.</p> <p>Note</p> <p>Currently, KinesinLMS only supports \"course passed\" type badges, but soon we plan to support assigning badges to any course milestone.</p> <p>Here's how to do add a \"course passed\" badge to a course:</p> <ul> <li>Open the course in Composer.</li> <li>Go to the \"Badges\" tab.</li> <li>Click \"Add Badge Class\" button and in the resulting form add the information copied from the badge class on Badgr.com into the form fields:<ul> <li>Copy the badge ID into the \"Open badge id\" field</li> <li>Copy the external entity ID into the \"External entity id\" field</li> <li>Copy the image URL into the \"Image url\" field</li> <li>Fill out the other fields as you see fit (\"Name\", \"slug\", etc.)</li> <li>You can also add a description and criteria information on this page. The criteria information will be displayed on the auto-generated criteria page.</li> </ul> </li> <li>Click the \"Course Settings\" tab<ul> <li>Make sure \"Enable badges\" is checked.</li> </ul> </li> </ul> <p>A \"course passed\" badge is now enabled for your course.</p>"},{"location":"course_authoring_guide/course_contents/","title":"Course Contents","text":"<p>When viewing a course in Composer, click the \"Contents\" tab to edit the actual course contents. This is where you'll do most of your work, creating the units in a course and organizing them into a nested navigation.</p>"},{"location":"course_authoring_guide/course_contents/#course-navigation","title":"Course Navigation","text":"<p>A course is composed of a series of nested nodes: each course has one or more \"module\" nodes; each module node has one or more \"section\" nodes; and each \"section\" node has one or more \"unit\" nodes. Mercifully, we stop there.</p> <p>A \"CourseUnit\" object with the actual course content is then attached to each \"unit\" node.</p> <p>Below is the course navigation for the Demo course.</p> <p></p> <p>So the first part of authoring a course could be building up your series of nested nodes to define the course structure. You don't have to do it that way...you could build the nav gradually as you add course units.</p> <p>Either way, you'll need to eventually define the all the nodes in your course navigation, and add content to each unit.</p> <p>Use the drop-down buttons in the nav bar to add, edit or remove nodes.</p> <p></p> <p>Note</p> <p>When you edit a node, we rely on the default Django admin panel for the user interface. It's a bit clunky. We hope to create UI directly in Composer for editing nodes.</p>"},{"location":"course_authoring_guide/course_contents/#course-unit-content","title":"Course Unit Content","text":"<p>When editing a course, only one course unit is shown at a time. You can add, edit and remove the blocks that make up the course unit.</p> <p></p>"},{"location":"course_authoring_guide/course_contents/#blocks","title":"Blocks","text":"<p>Course contents are built up by adding one or more \"Blocks\" to a unit in your course.</p> <p>A block is a piece of content that you create and configure. This is the current set of block types available, although we hope to have more available soon:</p> <ul> <li>HTML Block : Basic html content, primarly text and images. If you enter raw html you can use your own styles, script and so on.</li> <li>Video : Holds a video link and displays a video player. At the moment only YouTube is supported, but other platforms (Wistia, etc.) will be added soon.</li> <li>File Resource : A simple block to hold one or more file resources for the student to download.</li> <li>Forum Topic : A block that connects to a forum topic in Discourse.</li> <li>Assessment : An 'assessment' block, such as long-form text, multiple choice, etc.</li> <li>Survey : A block that displays a survey from an external provider.</li> <li>Diagram : Displays a 'simple interactive tool' for creating diagrams.</li> <li>TableTool : Displays a 'simple interactive tool' for interactive tables.</li> <li>External Tool : Displays an external tool connected by LTI (This one is still being developed)</li> </ul> <p>More information about each block will be added to these docs soon. In the meantime, each block has integrated information on what information you'll need to enter.</p>"},{"location":"course_authoring_guide/course_email_automations/","title":"Adding Email Automations to a Course","text":""},{"location":"course_authoring_guide/course_forum/","title":"Course Forum","text":"<p>Note</p> <p>This section of the docs ... and the forum feature itself... is still in progress. It works at a basic level, but doesn't yet smoothly support multiple cohorts. There's some unhappy complexity here due to how we need to configure Discourse cateogies, subcategories and forum topics if we want to limit forum topic discussion by cohort. Apologies.</p> <p>KinesinLMS relies on an external service to provide a course forum. Currently, the only supported forum is Discourse (a good choice!) but more may be supported in the future. Using an external forum is good because then we don't have to worry about implementing and updating forum features.</p> <p>However, it does mean we have to make sure KinesinLMS integrates correctly with the Discourse forum and knows which forum categories, subcategories and topics should exist for a course. In a sense, we're wedded to how Discourse arranges things.</p> <p>The first step to integrating forums into your course is to set up a Discourse server, or purchase an account from Discourse, and then connect it to KinesinLMS via a Forum Provider. You can read about how do that in the Forum section.</p> <p>Once that's done, you'll need to do two things to include forums in a particular course:</p> <ol> <li>Make sure a forum group, subgroup, category and subcategory exist to match your course and its default cohort.</li> <li>Add a <code>Forum</code> type block to your course content for each forum topic you want in the course. will handle creating the forum topic in the remote service.</li> </ol> <p>For step #1, Composer provides a button for configuration if one does not exist:</p> <p></p>"},{"location":"course_authoring_guide/course_forum/#configuring-the-forum-group","title":"Configuring the Forum Group","text":"<p>A user group must exist in the remote forum provider to represent students from this course. It should have been created when you created the course, but if it wasn't, you will see a \"Create Group\" button. Click it to ask KinesinLMS to create the group in Discourse.</p>"},{"location":"course_authoring_guide/course_forum/#configuring-the-forum-subgroup","title":"Configuring the Forum Subgroup","text":"<p>A user group must exist for each cohort in a course. We use these groups to assign cohorts to specific subcategories (see below).</p>"},{"location":"course_authoring_guide/course_forum/#configuring-the-forum-category","title":"Configuring the Forum Category","text":"<p>In Discourse, a \"Category\" is used to group forum topics. KinesinLMS creates one category for each course. If one doesn't exist, click the \"Create Forum Category\" button to create one.</p>"},{"location":"course_authoring_guide/course_forum/#configuring-the-forum-subategory","title":"Configuring the Forum Subategory","text":"<p>You may want to limit discussion to students in the same cohort. Ideally, Discourse would allow discussion on any forum topic to be limited to those in the same cohort as the current student using it. But Discourse doesn't do this :-(</p> <p>Therefore, to support cohort-limited discussions, KinesinLMS creates a Discourse subcategory for each cohort, and then creates a complete set of the forum topics in that subcategory. (See Forum Modesl for more details.) This is wasteful, as we have to repeat the forum topics for every cohort.</p> <p>Unfortunately, this approach is the only way in Discourse to limit topic discussions to cohorts. Yes, it's ugly. Alas.</p> <p>At any rate, every course forum needs at least one subcategory for the DEFAULT cohort. Click \"Create DEFAULT Cohort Group\" if one does not exist.</p>"},{"location":"course_authoring_guide/course_forum/#creating-a-forum-block","title":"Creating a Forum Block","text":"<p>To create a</p>"},{"location":"course_authoring_guide/course_forum/#repeating-a-forum-topic","title":"Repeating a Forum Topic","text":"<p>You may want to show the same forum topic in multiple units in your course, perhaps to prompt continued discussion with additional questions.</p>"},{"location":"course_authoring_guide/course_milestones/","title":"Course Milestones","text":"<p>In any course you can define various \"milestones\" a student can achieve. They can be simply informational (e.g. \"you watched all videos in the course\"), or they can be required to pass a course.</p> <p>By allowing more than one milestone to be required for passing a course, Composer gives you the ability to make more interesting criteria than simply answering a certain number of assessments. This allows you to create requirements like \"you have to watch five videos, post twice to the forum, and answer 10 assessments correctly to pass this course.\"</p> <p>All milestones are shown to the student on the \"Progress\" tab when they're viewing the course. On that screen, they're grouped for the student into required and non-required tables.</p> <p>To modify the milestones, click the \"Milestones\" tab when editing a course in Composer.</p> <p>Below are descriptions of each of the fields you can configure for a milesone.</p>"},{"location":"course_authoring_guide/course_milestones/#required-to-pass","title":"Required to Pass","text":"<p>If checked, this milestone is required for a student to pass a course. Other milestones may also be checked.</p>"},{"location":"course_authoring_guide/course_milestones/#type","title":"Type","text":"<p>You must define the type of milestone. It can be one of the following:</p> <ul> <li>\"Correct Answers\" : Counts the number of correct answers to assessments</li> <li>\"Video Plays\" : Counts the number of times a video is played (Distinct. Only counts plays for each video once...following plays of the same video are ignored).</li> <li>\"Forum Posts\" : Counts the number of forum posts by a student in this course.</li> <li>\"Simple Interactive Tool (SIT) Integrations\" : Counts the number of times a student interacts with SITs in the course (Distinct. Only counts interations with each SIT once...following interactions with the same SIT are ignored.)</li> </ul>"},{"location":"course_authoring_guide/course_milestones/#slug","title":"Slug","text":"<p>You can define a slug for this milestone. If you don't provide one, Composer will. But you might want to give it a useful name, as the slug will be used in things like events that you might look at later. Defining a useful name now might make that task easier.</p>"},{"location":"course_authoring_guide/course_milestones/#name","title":"Name","text":"<p>A name for the milestone. This is shown to the student in the \"Progress\" tab.</p>"},{"location":"course_authoring_guide/course_milestones/#description","title":"Description","text":"<p>A longer description of the milestone. This is shown to the student in the \"Progress\" tab.</p>"},{"location":"course_authoring_guide/course_milestones/#count-requirement","title":"Count Requirement","text":"<p>Defines the number of required interactions. The nature of the count depends on the type defined above, e.g. clicking play is a count for a \"Video Plays\" type, answering an assessment correctly is a count for a \"Correct Answers\" type.</p>"},{"location":"course_authoring_guide/course_milestones/#count-graded-only","title":"Count graded only","text":"<p>This only applies if the milestone is type \"Correct answers\". When you add an assessment to a course, it can be defined as \"graded\" or \"not graded.\" So enabling this option means only \"graded\" assessments will be counted.</p>"},{"location":"course_authoring_guide/course_milestones/#minimum-total-score-to-reach-milestone","title":"Minimum total score to reach milestone","text":"<p>This only applies if the milestone is type \"Correct answers\". An assessment can be assigned a score (the default is \"1\"). Those scores are summed and measured against this value if it's defined.</p>"},{"location":"course_authoring_guide/course_milestones/#badge-class","title":"Badge Class","text":"<p>The author can link a badge class to this metric so that the student receives a badge once the milestone is reached. (This feature is in development.)</p> <p>Note that this badge would only be for the current milestone...defining a \"course passed\" badge is a separate badge defined in the \"Badges\" section. See the badges page for more information.</p>"},{"location":"course_authoring_guide/course_resources/","title":"Course Resources","text":""},{"location":"course_authoring_guide/course_surveys/","title":"Course Surveys","text":""},{"location":"course_authoring_guide/creating_a_course/","title":"Creating a Course","text":"<p>Creating a course involves a few basic steps:</p> <ul> <li>Course Information: Create the initial course and add metadata like the course name and start date and time.</li> <li>Course Structure: Create the course navigation structure: modules, sections and units.</li> <li>Course Content: For every unit in the course, add one or more content \"Blocks.\" These blocks will probably mostly be \"HTML Content\" or \"Video\" blocks.</li> </ul>"},{"location":"course_authoring_guide/creating_a_course/#create-course-information","title":"Create Course Information","text":"<p>On the main \"Composer\" page you'll see a button to \"Create a New Course.\" If you click that, you'll be presented with a form for adding basic information about your course, including enrollment start date and course start date.</p> <p>Once you've added the initial information, Composer will present a new set of tabs that allow you to configure the course content, as well as the various features availble in the course, such as badges, certificates, surveys or forum discussions.</p> <p></p>"},{"location":"course_authoring_guide/using_template_tags/","title":"Using Template Tags","text":"<p>When using Composer to authoring a course, you can enter HTML text either in via the rich text editor (The WYSIWGY editor) or by writing raw HTML.</p> <p>If you're comfortable writing raw HTML, KinesinLMS supports a small number of custom template tags in the HTML content portions of the course. These tags are used to insert dynamic content into the course content.</p> <p>These tags only work in \"HTML Content\" fields within certain blocks. (Some blocks have simple \"text fields\" which don't support HTML.)</p> <p>Note</p> <p>If you want to use these tags in a block, you must select the \"Enable template tags\" checkbox on the Block Settings tab when editing a block</p> <p>Currently supported tags are listed below.</p>"},{"location":"course_authoring_guide/using_template_tags/#shortcut-hyperlinks","title":"Shortcut Hyperlinks","text":"<p>These tags make it easy to indicate a link to another part of the course without having to write out a full, static link directly. Writing out the full link is a bit brittle as you'd need to go back and change all your links if the course content changes. So using these shortcut links is preferrable.</p>"},{"location":"course_authoring_guide/using_template_tags/#module-link","title":"Module Link","text":"<p>The <code>module_link</code> tag displays a link to a module, according to its module index. It defaults to the first section and first unit in the module.</p> <p>If you enter this HTML content as part of your raw html in Composer:</p> <pre><code>...more about this in {{ module_link 3 }}....\n</code></pre> <p>will generate HTML like:</p> <pre><code>...more about this in &lt;a href=\"/course/1/module/some-module-slug/section/some-section-slug/unit/some-unit-slug\"&gt;Module 3&lt;/a&gt;....\n</code></pre>"},{"location":"course_authoring_guide/using_template_tags/#section-link","title":"Section Link","text":"<p>The <code>module_link</code> tag displays a link to a section, according to its module and section index. It defaults to the first unit available in the section.</p> <p>For example:</p> <pre><code>{{ section_link 1 3 }}\n</code></pre>"},{"location":"course_authoring_guide/using_template_tags/#unit-link","title":"Unit Link","text":"<p>The <code>unit_link</code> tag displays a link to a section, according to its module and section index.</p> <p>For example:</p> <pre><code>{{ unit_link 1 3 2 }}\n</code></pre>"},{"location":"course_authoring_guide/using_template_tags/#unit-link-slug","title":"Unit Link Slug","text":"<p>The <code>unit_slug_link</code> tag builds a link to a unit, given the CourseUnit's slug. This is helpful if you don't know the exact module, section and unit index.</p> <p>For example:</p> <pre><code>{{ unit_slug_link 'my-course-unit-slug' }}\n</code></pre>"},{"location":"course_authoring_guide/using_template_tags/#anon-user-id","title":"Anon User ID","text":"<p>The <code>anon_user_id</code> tag writes the current user's anonymous ID into the HTML content. This is useful when, for example, you need to create a link to an external service (like Qualtrics) where the user's anonymous ID is required.</p> <pre><code>{{ anon_user_id }}\n</code></pre>"},{"location":"course_authoring_guide/using_template_tags/#username","title":"Username","text":"<p>The <code>username</code> tag writes the current user's username into the HTML content.</p> <pre><code>{{ username }}\n</code></pre>"},{"location":"deployment/heroku/","title":"Heroku Deployment","text":""},{"location":"deployment/heroku/#background","title":"Background","text":"<p>Heroku is one of many Platform-as-a-Service (PaaS) providers you could choose from to host your KinesinLMS app, so make sure you look around at pricing and developer tools before selecting a service. Costs can run up quickly, so do your homework.</p> <p>Note</p> <p>Heroku isn't free. Not even close. They used to have a free tier, but even that is gone. Nothing gold can stay. So make sure you investigate Heroku charges (of which there are many) before attempting to deploy to Heroku. This project certainly does not recommend Heroku as an affordable option, but it is (still) relatively easy to get started. So please do your research on other providers. We hope to include directions for setting up some others (Fly.io, Render.com, etc.) soon.</p> <p>These instructions describe the basic steps for hosting your site on Heroku, but the steps should be similar for other services.</p> <p>These instructions assume you're using Heroku's native build packs, but if you want to use Docker, KinesinLMS includes a basic Dockerfile that should help you get started.</p>"},{"location":"deployment/heroku/#heroku-pipelines","title":"Heroku Pipelines","text":"<p>In a typical deployment, you'll want different servers for testing new features, for doing final tests before pushing something to production, and an actual \"live\" production server. You can organize these three servers using a Heroku pipline:</p> <ul> <li>development -- for testing and debugging new features</li> <li>staging -- for team testing and validation of production-ready builds</li> <li>production -- the live server</li> </ul> <p>You can set the environment variable <code>HEROKU_PIPELINE</code>, so that KinesinLMS is made aware of which of these servers its running on. You can use this information to modify code accordingly. (E.g. when not running onthe <code>PRODUCTION</code> pipeline, perhaps you only want to emails if they're going to you or some test accounts you've configured.)</p> <p>Note</p> <p>You don't have to set up three servers to get going. You could set up only one to limit cost. Using 'development', 'staging' and 'production' is a common pattern to help manage new features, product testing and production updates.</p>"},{"location":"deployment/heroku/#creating-heroku-apps","title":"Creating Heroku Apps","text":"<p>In this step we'll set up the Heroku apps for the three parts of our pipeline. We assume you are already familiar with Heroku, have a Heroku account, and have installed the Heroku CLI on your machine.</p> <p>These instructions are based on Heroku set up steps provided by Django Cookiecutter. You can read those instructions here: https://cookiecutter-django.readthedocs.io/en/latest/deployment-on-heroku.html</p> <p>Create the Heroku apps for each step in our pipeline. Use the name of your app in place of <code>(your app name)</code> in the following steps. For example, your app name might be <code>so-awesome-university</code>, because, what's up, it is.</p> <p>First step up the 'development' server:</p> <pre><code>heroku create --buildpack heroku/python --remote development --app (your app name)-development\n</code></pre> <p>After running this, you'll notice that Heroku created a new git remote on your local machine that points to your new 'development' server on Heroku. If you type <code>git remote -v</code> you should see that new remote:</p> <pre><code>\u276f git remote -v\ndevelopment https://git.heroku.com/(your app name)-development.git (fetch)\ndevelopment https://git.heroku.com/(your app name)-development.git (push)\n</code></pre> <p>Next, create a staging and a production server:</p> <pre><code>heroku create --buildpack heroku/python --remote staging --app (your app name)-staging\n\nheroku create --buildpack heroku/python --remote production --app (your app name)\n</code></pre> <p>Next we'll configure a server in the pipeline, adding the resources we'll need, like a database and a cache.</p>"},{"location":"deployment/heroku/#configurating-heroku-apps","title":"Configurating Heroku Apps","text":"<p>Once you've created your Heroku apps (servers), you'll need to configure them with the resources they need to operate -- a PostgreSQL database, a Redis cache, and any other services you might need. We can do this using the Heroku CLI.</p> <p>The following instructions are for configuring the <code>development</code> app, but the same steps would apply for <code>staging</code> and <code>production</code>.</p> <p>Note that when you have your Heroku apps defined in your local git repository as git remotes, you can just refer to them with <code>--remote</code> when performing command line operations, for example <code>--remote development</code> to target the development server.</p>"},{"location":"deployment/heroku/#postgresql-setup","title":"PostgreSQL Setup","text":"<p>KinesinLMS uses PostgreSQL as its database. We'll use the Heroku PostgreSQL add-on.</p> <p>Create a PostgreSQL database:</p> <pre><code>heroku addons:create heroku-postgresql:essential-0 --remote development\n</code></pre> <p>Schedule backups (since the 'essential-0' plan doesn't include automatic backups):</p> <pre><code>heroku pg:backups schedule --at '02:00 America/Los_Angeles' DATABASE_URL --remote development\n</code></pre> <p>...and then 'promote' the database to be our primary database (you might not need this step if Heroku already promoted your database in the previous step).</p> <pre><code>heroku pg:promote DATABASE_URL --remote development\n</code></pre>"},{"location":"deployment/heroku/#redis-setup","title":"REDIS Setup","text":"<p>Parts of KinesinLMS use Redis for caching and other purposes, such as asynchronous tasks run by Celery. So we'll need a Redis cache available.</p> <p>Let's add the Heroku Redis add-on:</p> <pre><code>heroku addons:create heroku-redis:mini --remote development\n</code></pre> <p>KinesinLMS needs to know that Celery is to use this Redis service, so copy the Redis URL into the appropriate env variable:</p> <pre><code>heroku config:set CELERY_BROKER_URL=$(heroku config:get REDIS_TLS_URL) --remote development\n</code></pre>"},{"location":"deployment/heroku/#environment-veriables-setup","title":"Environment Veriables Setup","text":"<p>Just a reminder that a conventional way to get system information into a web application is to use environment variables (see \"III Config\" in \"The Twelve-Factor App\"[https://12factor.net/]). So in this part we set up all the env variables we'll need to configure our app in Heroku.</p> <p>Let's set up the various environment variables that a basic Django app like KinesinLMS expects. Run these one at a time, so you can see Heroku's response.</p> <pre><code>heroku config:set PYTHONHASHSEED=random  --remote development\nheroku config:set WEB_CONCURRENCY=4  --remote development\nheroku config:set DJANGO_DEBUG=False  --remote development\nheroku config:set DJANGO_SECRET_KEY=\"$(openssl rand -base64 64)\"  --remote development\n</code></pre> <p>When we set the \"admin\" URL we'll use a random string...this adds another layer of security rather than just using 'admin'. Of course, you don't have to use a random string...you could just pick a slightly obfuscated name (e.g. 'so-special-admin').</p> <pre><code>heroku config:set DJANGO_ADMIN_URL=\"$(openssl rand -base64 4096 | tr -dc 'A-HJ-NP-Za-km-z2-9' | head -c 32)/\" --remote development\n</code></pre> <p>Next let's set the Django settings module. Even though we're running in \"development\", we want the server to behave as if it's in production, so we're setting this variable to <code>config.settings.production</code>...</p> <pre><code>heroku config:set DJANGO_SETTINGS_MODULE=config.settings.production  --remote development\n</code></pre> <p>Finally, we should set the allowed hosts. This setting configures Django to only allow certain URLs to be the app host. If you get a domain name for your server in Heroku, you'll use that here. Until you do, Heroku will have given your app a generic URL. You can find it in the Heroku panel for your app, under \"Settings\". It will look something like this: <code>https://(your app name)-development-e6ad78551565.herokuapp.com/</code>.</p> <p>Use that domain for the DJANGO_ALLOWED_HOSTS variable:</p> <pre><code>heroku config:set DJANGO_ALLOWED_HOSTS=(your app name)-development-e6ad78551565.herokuapp.com  --remote development\n</code></pre>"},{"location":"deployment/heroku/#aws-access-setup","title":"AWS Access Setup","text":"<p>By default, KinesinLMS expects to place static and media files in an AWS S3 bucket. However, you can configure it to store these files somwhere else, like Google Cloud Storage, Digital Ocean Spaces, and so on. Heroku even has some easy plugins you can use. More on that here.</p> <p>Since we're defaulting to AWS S3, you'll need to create a bucket on AWS S3 to hold these assets, as well as an AWS IAM user with access to that bucket. Describing how to create these in AWS is outside the scope of this document, but you can read more about it here: https://testdriven.io/blog/storing-django-static-and-media-files-on-amazon-s3/</p> <p>Note</p> <p>If you use AWS S3, be really careful with your configuration. This is one of those places you can't avoid complexity and reading the docs.</p> <p>Once you've created an S3 bucket for the KinesinLMS app and an IAM user with access to that bucket, create an access key and secret for that IAM user.</p> <p>Note that you'll have to do this setup process for each app in your pipeline, so you might name your S3 bucket's accordingly, probably using the same name as your app and pipelie (e.g. <code>so-awesome-university-development-s3</code> for development, <code>so-awesome-university-staging-s3</code> for staging, and so on).</p> <p>The use the AWS settings you've just created to set the following environment values in the Heroku environment ::</p> <pre><code>heroku config:set DJANGO_AWS_STORAGE_BUCKET_NAME=(your storage bucket name) --remote development\nheroku config:set DJANGO_AWS_ACCESS_KEY_ID=(your aws access key) --remote development\nheroku config:set DJANGO_AWS_SECRET_ACCESS_KEY=(some django aws secret access key) --remote development\nheroku config:set DJANGO_AWS_S3_REGION_NAME=us-west-1 --remote development\n</code></pre>"},{"location":"deployment/heroku/#custom-environment-variables-setup","title":"Custom Environment Variables Setup","text":"<p>There are a few custom environment variables that KinesinLMS uses to configure the application. We'll set those now:</p> <pre><code>heroku config:set DJANGO_PIPELINE=\"DEVELOPMENT\" --remote development\n</code></pre>"},{"location":"deployment/heroku/#pre-deploy-steps","title":"Pre-Deploy Steps","text":"<p>You're now ready to push the app to heroku. But before you do, make sure you've compiled your stylesheets, packaged your javascript, and basically got everything ready to go.</p>"},{"location":"deployment/heroku/#compile-stylesheets","title":"Compile Stylesheets","text":"<p>If there has been any changes to scss files, make sure they're compiled to css files.</p> <p>In an effort to keep things simple, there's a npm package.json command to watch scss files directly using sass. (You'll need sass installed on your machine.)</p> <p>To run sass in watch mode the 'watch-styles' npm command: ::</p> <pre><code>npm run watch-styles\n</code></pre> <p>When this command is run, all .sass files in the kinesinlms/static/sass directory will be watched and compiled to .css files in the kinesinlms/static/css directory any time you change something in a .scss file.</p>"},{"location":"deployment/heroku/#package-javascript","title":"Package Javascript","text":"<p>Make sure all javascript-based components have been transpiled and packaged. (You'll need node and npm installed on your machine.) Note that this part of the build step is somewhat rudimentary and will be improved in the future.</p> <p>If you're pushing to the PRODUCTION server on the pipeline, that means building minified javascript files:</p> <pre><code>npm run build\n</code></pre> <p>But if you want to debug on DEVELOPMENT or STAGING, create javascript with source maps:</p> <pre><code>npm run dev\n</code></pre> <p>This will create compiled javascript files in kinesinlms/static/js.</p> <p>IMPORTANT: Make sure you add any new or updated files to GitHub before continuing.</p>"},{"location":"deployment/heroku/#deploy-to-heroku","title":"Deploy to Heroku","text":"<p>IMPORTANT: Make sure you add any new or updated files from the previous steps to your git repository before continuing, otherwise they won't get pushed to Heroku in the next step.</p> <p>DOUBLY-IMPORTANT: Make sure all your tests are passing before pushing to production.</p> <p>Pushing your project to Heroku is as simple as pushing to GitHub.</p> <pre><code>git push development master\n</code></pre> <p>(If you were pushing to <code>staging</code> or <code>production</code> you'd just replace <code>development</code> with that target.)</p> <p>When you push your code, Heroku will automatically rebuild your app, including running any required migrations.</p>"},{"location":"deployment/heroku/#post-deploy","title":"Post-deploy","text":"<p>If you're setting up a server for the first time (or just cleaned out DEVELOPMENT and want to set up initial data), run the following management to create a superuser for yourself:</p> <pre><code>heroku run python manage.py createsuperuser --remote development\n</code></pre> <p>Also, you may want to configure KinesinLMS with some initial data. There's a management command called <code>setup_all</code> that you can customize to set up your server with some initial users, or speakers, or whatever. The default implementation of this command simply sets up a Site instance.</p> <p>To run this command if you're setting up DEVELOPMENT:</p> <pre><code>heroku run python manage.py setup_all --remote development\n</code></pre>"},{"location":"deployment/heroku/#open-your-app","title":"Open your app","text":"<p>At this point, if you navigate to your apps URL (or just type 'heroku open' in the project directory), you should see your site!</p>"},{"location":"deployment/overview/","title":"Deployment Overview","text":"<p>KinesinLMS is a Django app that can be hosted on any Platform-as-a-Service (PaaS) that supports Django, such as Heroku, Fly.io or Render.com. It can also be hosted on your own custom-built server or platform!</p> <p>These instructions will describe setting up on Heroku, but the basic steps are the same for any PaaS.</p>"},{"location":"deployment/sentry/","title":"Application Monitoring with Sentry","text":"<p>There are a number of services available to help you monitor the state of your system, and warn you if things are going badly.</p> <p>Sentry.io is one such service. If you want to use Sentry, and are using Heroku as your service platform, you only need to create a Sentry account, create  a project in Sentry for your app, note down the \"DNS\" (client key) for your app, and then set it as an environment variable in Heroku.</p> <p>For example, if you're configuring a <code>development</code> remote for Heroku:</p> <pre><code>herok config:set SENTRY_DSN=(your project's DSN in Sentry) --remote development\n</code></pre>"},{"location":"development/installation_overview/","title":"Development Overview","text":"<p>KinesinLMS is a Django application implemented using the conventions established by the (most excellent) Cookiecutter Django project.</p> <p>So setting it up is similar to setting up any Django project built from Django cookiecutter, but with a few extra steps. This section describes how you can get started with KinesinLMS in your local environment, including both setting up the project and then doing thing like running tests.</p>"},{"location":"development/local_setup/","title":"Local Setup","text":"<p>This page describes how to set up KinesinLMS on your local machine. It's biased towards macOS, but the steps are similar for other operating systems. If you prefer Docker-based installs, there is a Dockerfile, but it's not documented yet, so you might have to rely on the Cookiecutter Django docs for help with that: https://cookiecutter-django.readthedocs.io/en/latest/developing-locally-docker.html</p>"},{"location":"development/local_setup/#prerequisites","title":"Prerequisites","text":"<p>You should already have the following applications installed on your macOS system. Most can be installed via <code>brew</code>.</p> <ul> <li>Redis</li> <li>PostgreSQL</li> <li>Node (and npm)</li> <li>Python ( preferrably 3.12.1 or later )</li> <li>Virtualenvwrapper https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html </li> </ul>"},{"location":"development/local_setup/#virtual-environment","title":"Virtual Environment","text":"<p>Create a virtualenv for the project. On macOS, with Virtualenvwrapper installed, you can do this with the following command (assuming your python3 is at <code>/usr/local/bin/python3</code>):</p> <pre><code>    mkvirtualenv --python=/usr/local/bin/python3 kinesinlms\n</code></pre> <p>If your environment isn't already activated, activate it:</p> <pre><code>workon kinesinlms\n</code></pre> <p>Next, install the project's python dependencies:</p> <pre><code>    pip install -r requirements/local.txt\n</code></pre> <p>After that, we'll install tools to help us build the project's javascript dependencies.</p> <p>Although KinesinLMS tries to keep any javascript build steps to a minimum, we still need to build a few javascript libraries from source definitions like those in <code>static/src/</code> and in <code>kinesinlms_components</code>. You will need to have npm and node installed to build these javascript and typescript source files.</p> <p>If you're on macOS and you don't have those installed, you can install them with homebrew:</p> <pre><code>    brew install node\n</code></pre> <p>Then, install the project's javascript dependencies:</p> <pre><code>    npm install\n</code></pre> <p>And finally, build the client code:</p> <pre><code>    npm run build\n</code></pre> <p>This creates the bundled javascript files needed by the app (mainly for the advanced assessment tools like DiagramTool and TableTool).</p> <p>While you're working, you'll want the scss to compile to css automatically. You can do that with the following command:</p> <pre><code>    npm run watch-styles\n</code></pre> <p>There's no command to watch and recompile the javascript files, but that shouldn't be too hard to write if you get tired calling <code>npm run build</code> after changing any javascript files.</p>"},{"location":"development/local_setup/#set-up-environment-variables","title":"Set up environment variables","text":"<p>You'll need some basic enviroment variables set to run the project. These variables will look slightly different when you're running locally as compared to when you're running in development, staging or production on your host platform.</p> <p>When setting up to run locally, you can copy the example file <code>.env.example</code> to a file like <code>_envs/_local/django.env</code>, and then change the values as you wish (you'll need to know a bit about how Django uses these variables). Make sure to configure your IDE to load the values in <code>_envs/_local/django.env</code> when running the Django server, shell, or a management command.</p> <p>By default, KinesinLMS installs <code>pytest-dotenv</code> as a dependency in local.txt, so that library will already be available to you. Therefore, if you're using VS Code, you can just add a line like <code>\"envFile\": \"${workspaceFolder}/_envs/_local/django.env\"</code> to the correct configuration to have the .env file values loaded when running Django. More here: https://pypi.org/project/python-dotenv/#getting-started</p>"},{"location":"development/local_setup/#database","title":"Database","text":"<p>For this next step, you'll need PostgreSQL set up on your machine and running. If you don't have it installed, you can install it with homebrew:</p> <pre><code>    brew install postgres\n</code></pre> <p>Then, start the postgres server:</p> <pre><code>    brew services start postgres\n</code></pre> <p>Create a PostgreSQL database for our local development:</p> <pre><code>    psql -c \"CREATE DATABASE kinesinlms;\"\n</code></pre> <p>Then, migrate the database:</p> <pre><code>    python manage.py migrate\n</code></pre>"},{"location":"development/local_setup/#django-setup","title":"Django Setup","text":"<p>You'll probably want a Django superuser to manage the system, so create one now:</p> <pre><code>    python manage.py createsuperuser\n</code></pre> <p>You'll also need to set up some initial model instances and do a few other configuration steps to get the app ready. We've created a <code>setup_all</code> management command to do that. Feel free to extend that command to do other initial setup tasks you require.</p> <pre><code>    python manage.py setup_all\n</code></pre>"},{"location":"development/local_setup/#redis-setup","title":"Redis Setup","text":"<p>KinesinLMS uses Redis for managing background tasks. You'll need to have Redis installed and running if you want to run these background tasks locally. Otherwise, you can set the <code>CELERY_TASK_ALWAYS_EAGER</code> setting to <code>True</code> in your local environment to run the tasks synchronously.</p> <p>If you don't have Redis installed, you can install it with homebrew:</p> <pre><code>    brew install redis\n</code></pre> <p>Then, start the Redis server:</p> <pre><code>    brew services start redis\n</code></pre> <p>You'll now need to run Celery as a separate task. You can do that with the following command in your project's root directory. Make sure all the environment variables are set before running this...especially <code>DJANGO_SETTINGS_MODULE=config.settings.local</code> ... just like when running Django.</p> <pre><code>    celery -A config worker -Q celery -l DEBUG\n</code></pre>"},{"location":"development/local_setup/#third-party-services-when-developing-locally","title":"Third-party Services When Developing Locally","text":"<p>As you know, KinesinLMS relies on third-party services for more complex features like forums or email automations. That makes it a bit harder to replicate those systems when developing locally, although there are options:</p>"},{"location":"development/local_setup/#discourse-forums","title":"Discourse Forums","text":"<p>If you're going to use Discourse as a forum service, you'll probably want to run Discourse locally, which isn't exactly easy, but is relatively straightforward if you're familiar with Docker. You can run a docker image of Discourse and configure it to look similar to your production environment.</p> <p>View the \"Local Discourse Setup\" page in the \"Forum\" section for more information.</p>"},{"location":"development/local_setup/#surveys","title":"Surveys","text":"<p>If you want to have surveys in your course, the only option at the moment is Qualtrics, although we plan to add other survey providers. There isn't a way to really run Qualtrics locally, so the best option is to create an account and then create surveys for use in local course development and testing.</p> <p>View the Surveys section for more info.</p>"},{"location":"development/local_setup/#badges","title":"Badges","text":"<p>You'll need to create a (free) account with Badgr https://badgr.com/ to support course completion badges. Here too it's probably best to create an issuer and badge classes just for your local development and testing.</p> <p>View the Badges section for more info.</p>"},{"location":"development/local_setup/#email-automations","title":"Email Automations","text":"<p>The only provider currently supported is ActiveCampaign, although once again we plan to add support for other email automation services in the future. ActiveCampaign does allow  \"developer sandbox accounts\" to be set up for free, so that's an option if you want to include email automations when running locally: https://developers.activecampaign.com/page/developer-sandbox-accounts</p> <p>View the Email Automation section for more info.</p>"},{"location":"development/running_tests/","title":"Tests","text":"<p>KinesinLMS tries hard to have reasonable suite of tests, and any additional features or updates made should add both unit and end-to-end tests for that feature.</p>"},{"location":"development/running_tests/#test-types","title":"Test Types","text":"<p>Test are written to use the Pytest library, and include both \"unit\" tests to exercise individual classes and methods, as well as \"integration\" or \"end-to-end\" tests to excercise a complete workflow as if a user was interacting with the application.</p>"},{"location":"development/running_tests/#env-settings-for-tests","title":"Env Settings for Tests","text":"<p>Sometimes you'll want slightly different initial configuation values in your environment variables when running tests. Therefore, we recommend creating a separate .env file specifically for tests, for example <code>_envs/_local/django_test.env</code>.</p> <p>So if you're just starting out, copy the <code>.env.example</code> example file to <code>_envs/_local/django_test.env</code>, and update it as needed.</p> <p>There are different ways to load .env files before running tests. KinesinLMS uses the <code>pytest-dotenv</code> library, which allows us to add a simple configuration line to our <code>.pytest.ini</code> file indicating where pytest should load env variables before starting.</p> <p>For example, if you want to use <code>django_test.env</code> as your environment file, and you store that file in <code>_envs/_local/</code>, you'd set the following in your <code>.pytest.ini</code> file:</p> <pre><code>env_files = _envs/_local/django_test.env\n</code></pre>"},{"location":"development/running_tests/#unit-tests","title":"Unit Tests","text":"<p>Unit tests are stored in the <code>/tests</code> directory of each Django app that composes the KinesinLMS project, e.g. <code>kinesinlms/badges/tests/</code>. Pytest will automatically discover these tests when running.</p>"},{"location":"development/running_tests/#integration-tests","title":"Integration Tests","text":"<p>Integration tests are stored in the top-level <code>/tests</code> directory of the KinesinLMS project. These tests are a little more involved, as they rely on the \"Selenium\" library to start up and drive a browser instance when simulating user interactions.</p> <p>Integration tests are a little hard to write, but really pay off in turning up issues that unit tests might miss.</p> <p>In order to run these tests locally you'll need Firefox installed (or choose a different browser to act as the client).</p> <p>When running the tests on a remote server, you'll need to install <code>firefox</code> on the server to run selenium tests.</p>"},{"location":"development/running_tests/#javascript-tests","title":"Javascript Tests","text":"<p>A few interactive components (e.g. DiagramTool and TableTool) are written in Javascript and/or Typescript and use npm as a build tool. Therefore, a separate test set up is required to test those components in a granular way.</p> <p>This is a bit tedious, and as KinesinLMS moves towards using HTMx for interactivity hopefully there will be less need for these kind of tests, but for now we need to have this separate test structure.</p> <p>To run this test framework, run:</p> <pre><code>npm run test\n</code></pre>"},{"location":"development/running_tests/#summary-for-running-tests","title":"Summary for Running Tests","text":"<ul> <li>Django: Run Django-focused unit and integration tests by running pytest in the root directory <code>pytest</code>.</li> <li>Javascript Run client-focused javascript tests by running <code>npm run test</code>.</li> </ul>"},{"location":"development/running_tests/#test-coverage","title":"Test Coverage","text":"<p>To run the tests, check your test coverage, and generate an HTML coverage report:</p> <pre><code>coverage run -m pytest\ncoverage html\nopen htmlcov/index.html\n</code></pre>"},{"location":"email/email_automation_overview/","title":"Email Automation Overview","text":"<p>Email automation providers are third-party services that allow you to send an automated email to one or more of your users, usually when certain events happen (like a student enrolls in a course).</p> <p>You can configure KinesinLMS to send certain student activity events to your email automation provider. You can then set up automations in your email automation service to do certain things upon receiving these events, for example, sending a welcome email to a new student upon receiving an enrollment event, or sending a congratulations email upon receiving a \"course passed\" event.</p> <p>At the moment, KinesinLMS only supports one email automation provider: ActiveCampaign.</p> <p>But it should be relatively easy to add support for other providers by creating a new implementation of the <code>EmailAutomationProvider</code> base class.</p> <p>The next section will show you how to set up ActiveCampaign as your email automation provider.</p>"},{"location":"email/provider_integration/","title":"Email Automation Provider Integration","text":"<p>This section explains how to set up an email automation provider. At the moment, this process is specific to ActiveCampaign, but it should be relatively easy to add support for other providers.</p>"},{"location":"email/provider_integration/#activecampaign-credentials","title":"ActiveCampaign Credentials","text":"<p>The first step to integrating with an email automation service is creating an account and getting credentials required so that KinesinLMS can use the service's API. That information is used to set up an \"Email Automation Provider\" in the KinesinLMS management panel.</p> <p>If an email automation provider is configured, KinesinLMS will use the service's API to send events to the service as students interact with the system.</p>"},{"location":"email/provider_integration/#setting-up-an-email-automation-provider-in-kinesinlms","title":"Setting Up an Email Automation Provider in KinesinLMS","text":"<p>So the first step is setting up an account with ActiveCampaign and getting an API key and API URL.</p> <p>Note</p> <p>ActiveCampaign is not free, so please make sure you review the fees and terms of the service carefully if you intend to use it with a course.</p> <p>If you want to experiment with ActiveCampaign before committing, it (at the time of writing) provides a free developer accounts for testing purposes.</p> <p>Once you have your ActiveCampaign account, you can find your API credentials by logging into your account and navigating to the \"Settings\" page and clicking on the \"Developer\" tab.</p> <p>You'll need both the \"API URL\" and the \"API Key\" shown on this page to configure KinesinLMS.</p> <p>KinesinLMS tries not to store secret information in the database, but rather expects you to set secrets as environment variables. This is a good practice for security reasons.</p> <p>In this case, you'll need to set the <code>EMAIL_AUTOMATION_PROVIDER_API_KEY</code> environment variable based on the API key you've obtained from ActiveCampaign. If you're doing this in an .env file, you'll add a line in your file that looks like this:</p> <pre><code>EMAIL_AUTOMATION_PROVIDER_API_KEY=(your active campaign api key)\n</code></pre> <p>Then, after restarting and logging into KinesinLMS, go to the management &gt; email automation provider page. This page allows you to configure all other settings for your email automation provider connection.</p> <p>On this page, you'll see a simple form for turning on (via the \"Active\" checkbox) and managing your email automation provider connection. You'll need to set the \"type\" field to \"ActiveCampaign\" and the \"API URL\" to the value you obtained from ActiveCampaign.</p> <p>Note: Remember that this page doesn't provide a way to set the API key...you need to set the .env variable as explained agove. However, thispage will warn if you haven't set it in the environment.</p> <p>Save your changes, and you should be good to go! You can test your connection with the \"Test Connection\" button at the bottom of the page.</p> <p>You can safely ignore the Tag ids field. This field is used to store mappings from tags used in the email automation provider to their integer IDs. Unfortunately, some providers (like ActiveCampaign) require a developer to send tag IDs rather than just the tag itself during API calls. As it operates, KinesinLMS will automatically populate this field with the tag IDs it needs to send events to the email automation provider.</p> <p>But wait, you're not completely done yet. You still have to configure each course to send events to the email automation.</p>"},{"location":"email/provider_integration/#setting-up-email-automation-provider-events-in-a-course","title":"Setting Up Email Automation Provider Events in a Course","text":"<p>To configure a course to send events to the email automation provider, go to the course's settings page and click on the \"Email Automations\" tab.</p> <p>On this page, you can activate the connection with the \"Active\" checkbox.</p> <p>You can also select which events you want to send to the email automation provider. At the moment, only three events are available for selection:</p> <ul> <li>User registration</li> <li>\"Course Enrolled\"</li> <li>\"Course Unenrolled\"</li> </ul>"},{"location":"email/system_emails/","title":"System Emails","text":""},{"location":"email/system_emails/#configuration","title":"Configuration","text":"<p>In order for system emails to work, you must have an account with an email gateway and then configure your account information in the environment.</p> <p>For example, if you have an account with PostMark, you would set up an API key, and then use that key in the environment:</p> <pre><code> EMAIL_SERVICE_TOKEN=\"(your email API token)\"\n</code></pre> <p>You'll also need to configure the <code>production.py</code> file to reflect the email provider you're using. If it was PostMark, it might look like this:</p> <pre><code> # Anymail (Postmark)\n # ------------------------------------------------------------------------------\n\n # https://anymail.readthedocs.io/en/stable/installation/#installing-anymail\n INSTALLED_APPS += ['anymail']  # noqa F405\n EMAIL_BACKEND = \"anymail.backends.postmark.EmailBackend\"\n\n # https://anymail.readthedocs.io/en/stable/installation/#anymail-settings-reference\n ANYMAIL = {\n   \"POSTMARK_SERVER_TOKEN\": env(\"POSTMARK_SERVER_TOKEN\", default=None),\n   \"SEND_DEFAULTS\": {\"track_opens\": True},\n }\n</code></pre> <p>Please consult your email provide for more information on how to configure Django to use it for system emails.</p>"},{"location":"email/system_emails/#survey-emails","title":"Survey Emails","text":"<p>If you're doing any kind of research on your e-Learning effort, surveys can be really important. They were for us when we developed iBiology Courses (the precursor to KinesinLMS).</p> <p>KinesinLMS has a simple feature called \"survey emails\" that you can set up to automatically send reminder emails about surveys once a student encounters one in a course.</p>"},{"location":"email/system_emails/#automating-survey-reminder-emails","title":"Automating Survey Reminder Emails","text":"<p>There's simple management command that will send out any current survey reminder emails.</p> <p>Ideally this command would be run once a day, but it could be run more or less frequently if desired.</p> <p>One way to run it daily is to set up a chron command to run the management command.</p> <p>To run the task manually: ::</p> <pre><code> heroku run python manage.py survey_emails --remote production\n</code></pre> <p>On heroku, you can use the use Heroku Advanced Scheduler to run the task each day.</p> <p>Setting this up is outside the scope of these docs. You can find more information here.</p> <p>Once you have an advanced scheduler set up, you can view the automated task's logs: ::</p> <pre><code>heroku logs -t -a (your app name) -d advanced-scheduler\n</code></pre>"},{"location":"forum/connecting_to_forum_service/","title":"Connecting KinesinLMS to the Forum Service","text":"<p>KinesinLMS is designed to support multiple forum providers, but currently only supports Discourse. In this section we describe how to configure KinesinLMS to use Discourse as its forum provider.</p> <p>You should already have a Discourse instance running. The first step is to log into Discourse as the admin user and set up the necessary keys and webhooks.</p> <p>There are three main integration points between KinesinLMS and Discourse:</p> <ul> <li>An API connection for forum setup when a course is authored or loaded.</li> <li>SSO for logins so a user can move seamlessly between the KinesinLMS web app and the Discourse web app.</li> <li>KinesinLMS callbacks for forum activity. This allows Discourse to alert KinesinLMS of user post activity.</li> </ul> <p>Here we set up these integration points. These instructions work for both a \"production\" Discourse server and  one set up locally using e.g. Docker.</p>"},{"location":"forum/connecting_to_forum_service/#general-settings","title":"General Settings","text":"<p>Before we start, make sure you have some basic \"required\" Discourse settings established.</p> <p>Log in to your Discourse server. In the Admin &gt; Settings 'required' tab, set all fields to the best of your ability. In particular:</p> <ul> <li>Set site description to something like \"My LMS site's forums\"</li> <li>Set short site description to something similar.</li> <li>Search for \"duplicate\" and find the following two flags. Set them to checked (true):</li> <li><code>allow duplicate topic titles</code></li> <li><code>allow duplicate topic titles category</code></li> </ul>"},{"location":"forum/connecting_to_forum_service/#api-key","title":"API Key","text":"<p>KinesinLMS communicates with Discourse via API when doing things like creating Groups, or creating new Categories, Subcategories and Topics for a newly added course.</p> <p>To do this, it needs an API key to be created on Discourse and then saved in the KinesinLMS app.</p> <p>When logged into the Discourse instance, go to Amdin &gt; API and click the button 'New API Key'.</p> <p></p> <p>Set the following properties in the new API key form:</p> <ul> <li>Description: \"(your LMS site name) integration\"</li> <li>User level: \"Single User\"</li> <li>User: \"my_admin_name\" (or whatever your admin user is)</li> <li>Scope: \"Global\"</li> </ul> <p>Then click the 'Save' button and copy the API key that is generated. This is the key you'll need to set in the KinesinLMS environment variable <code>FORUM_API_KEY</code>.</p> <p>If you're running locally, you can add that value to your environment directly, or to <code>_envs\\_local\\django.env</code> if you're using env files.</p> <p>If you're setting up for production, you'll need to use the mechanism for modifying environment variables provided by your host. For example, on Heroku it would be something like <code>heroku config:set FORUM_API_KEY='(your key)' --remote (your remote name)</code></p>"},{"location":"forum/connecting_to_forum_service/#discourse-api-webhook","title":"Discourse API Webhook","text":"<p>In addition to the API key, you also need to set up a webhook in Discourse so that it notifies your KinesinLMS instance when a user posts something in the forum.</p> <p>On the same Admin &gt; API page in the Discourse admin, select the <code>Webhooks</code> tab and click the 'New Webhook' button.</p> <p>Set the following properties in the form:</p> <ul> <li>Payload URL: \"(your KinesinLMS instance URL)/forum/activity_callback\"<ul> <li>If you're running locally, you'll use something like <code>http://localhost:8000/forum/activity_callback</code></li> <li>If you're setting up for production, it will be more like <code>https://(your KinesinLMS domain)/forum/activity_callback</code></li> </ul> </li> <li>Content Type: \"application/json\"</li> <li>Secret: A secret key to help verify the webhook.<ul> <li>Remember this string, as you'll set the same value in the <code>FORUM_CALLBACK_SECRET</code> environment variable in your KinesinLMS system.</li> </ul> </li> <li>Select the following events:<ul> <li>All Topic Event checkboxes</li> <li>All Post Event checkboxes</li> <li>( you can select other events, but you'll have to update the DiscourseService and DiscourseProvider class to handle them).</li> </ul> </li> <li>At the bottom of the page:<ul> <li>make sure <code>Check TLS certificate of payload url</code> is checked</li> <li>make sure <code>Active</code> is checked.</li> </ul> </li> </ul> <p></p> <p>Note</p> <p>IMPORTANT! Before you continue, make sure you now set the secret you used above in the <code>FORUM_CALLBACK_SECRET</code> environment variable for your KinesinLMS instance and restart it. This is necessary so that the KinesinLMS instance can verify the webhook request is coming from Discourse.</p>"},{"location":"forum/connecting_to_forum_service/#discourse-sso","title":"Discourse SSO","text":"<p>KinesinLMS uses Discourses' SSO feature so that users only have to sign in to KinesinLMS (Django) and can then access Discourse directly without another login. This allows us to show \"Forum\" as one of the items in the top navigation.</p> <p>We need to set up SSO in Discourse however to make this work. Discourse used to call this feature \"Discourse SSO\" but now calls it \"DiscourseConnect\".</p> <p>On the Admin &gt; Settings page in Discourse, enter DiscourseConnect in the search box.</p> <ul> <li>Set the <code>discourse connect url</code> field to <code>https://(your KinesinLMS domain URL)/forum/sso</code><ul> <li>If you're running locally, you'll use something like <code>http://localhost:8000/discourse/sso</code></li> </ul> </li> <li>Set the <code>site description</code> field to something like \"KinesinLMS\"</li> <li>Set the <code>discourse connect overrides bio</code> checkbox to checked</li> <li>Set the <code>discourse connect secret</code> field to a secret key for your KinesinLMS instance.</li> <li>The secret key should be the same as the <code>DISCOURSE_SSO_SECRET</code> environment variable for your KinesinLMS instance.</li> </ul> <p>Note</p> <p>IMPORTANT! Before you continue, make sure you now set the SSO secret you used above in the <code>DISCOURSE_SSO_SECRET</code> environment variable for your KinesinLMS instance and restart it. This is necessary so that the KinesinLMS instance can verify the webhook request is coming from Discourse.</p>"},{"location":"forum/connecting_to_forum_service/#url","title":"URL","text":"<p>Update your env variable settings so KinesinLMS knows the base URL for the Discourse app.</p> <ul> <li>If you're running locally, this will be something like <code>localhost:4200</code> (unless you modified the container to be something else)</li> <li>If you're setting up for production, it will be the URL given to you by Discourse.</li> </ul> <p>Set the variable either in your shell or in your env variable file:</p> <pre><code>    DISCOURSE_BASE_URL=\"(Discourse URL)\"\n</code></pre> <p>... and then restart your KinesinLMS system to pick up this change.</p> <p>Ok! Now Discourse is connected. You can now manage the integration via the KinesinLMS Management panel.</p>"},{"location":"forum/connecting_to_forum_service/#plugins","title":"Plugins","text":"<p>You probably want to further customize Discourse to better integrate with your KinesinLMS-based system. You can use Discourse \"plugins\" to help do this. We've found two plugins particularly useful for getting the forums to have a similar look and feel as the KinesinLMS site.</p> <ul> <li>Brand Header Theme Component</li> <li>Category Headers theme component</li> </ul> <p>To install these, go to Admin &gt; Customize &gt; Themes &gt; Components and then click \"Install.\"</p> <p>See each plugin's docs for more information on cofiguring look-and-feel.</p>"},{"location":"forum/forum_models/","title":"Modeling the Form Provider","text":"<p>This section describes how the objects provided in Discourse are modeled and modified in KinsekinLMS, and how we access their representations in Discourse via the Discourse API.</p>"},{"location":"forum/forum_models/#modeling-discourse-objects","title":"Modeling Discourse Objects","text":"<p>To support forum discussions, Discourse provides \"Topics\" that are composed of a post and a number of replies. So whenever we have a discussion point in a course, we create a topic in Discourse.</p> <p>Discourse allows topics to be grouped into categories, so the first inclination would be to just put all topics for a course into a category, and then we're done.</p> <p>However, when one wants to limit some topics to a particular cohort in a course, things get a bit more complicated.</p> <p>Discourse allows categories to be grouped into parent categories, so the solution we came up with was to make a category for each course and then a subcategory for each cohort in the course. Then, a copy of each topic is placed in that subcategory. (Background discussion here)</p> <p>In KinesinLMS, each course gets a DEFAULT cohort when it is created. And most courses only have that DEFAULT cohort, so this is not a big deal -- there will be one parent category in Discouse and one subcategory for the Discourse cohort.</p> <p>But if a course has multiple cohorts, then each cohort will need to have its own subcategory and a copy of each topic.</p> <p>This is a bit of a hack, but it works. And it allows us to use the Discourse API when a course is authored to create the category, subcategories and topics, and then when a course is run to create a subcategory and copy the topics for any new cohort created in the course.</p>"},{"location":"forum/forum_models/#discourse-api","title":"Discourse API","text":"<p>The Discourse API is a bit odd: sometimes it wants an ID, sometimes a name, and sometimes a slug.</p> <p>So in our models you'll often see two identifiers saved for a Discourse object: an ID and a name or an ID and a slug (depending on the model type). We then use one or the other in a particular API call.</p>"},{"location":"forum/forum_models/#discourse-groups","title":"Discourse Groups","text":"<p>Whenever we set up Discourse to host topics for a course, we first start by creating \"groups\" in Discourse into which we can add students as they enroll.</p> <p>Each course will get at least two Discourse groups:</p> <ul> <li>one group for all topics any enrolled student in this course can view.</li> <li>one group for each specific cohort in the course.</li> </ul> <p>For the 'cohort' group, we always add a Discourse group for the course's DEFAULT cohort. We then add a new group any time an author or admin adds a new cohort to the course.</p> <p>We follow a standard naming convention when creating a Discourse group for a cohort: [course token]co[cohort name].</p> <p>For example if you have a course with a token of DEMO_SP, then the Discourse group for the DEFAULT cohort will be named DEMO_SP_co_DEFAULT.</p> <p>Any other cohorts added to an KinesinLMS course should automatically get a new Discourse group created in Discourse and assigned to it through the CohortForumGroup model in Django.</p>"},{"location":"forum/forum_models/#django-models","title":"Django Models","text":"<p>The ForumTopic model is the main Django model to represent a topic in a course, and thereby in Discourse. This model is linked directly a Block of type FORUM_TOPIC. It stores the Discourse ID and Discourse slug for a topic (different Discourse endpoints use one or the other).</p> <p>Each time a FORUM_TOPIC block type is added to a course, KinesinLMS will need to use the Discourse API to create a new topic in Discourse for every subcategory in the course's main Discourse category.</p> <p>And every time a new cohort is added to a course, KinesinLMS will need to use the Discourse API to create new topics for every FORUM_TOPIC block in a course, creating them in the new cohort's corresponding Discourse subcategory.</p> <p>Unlike the Assessment model, ForumTopic is not in a one-to-one relationship with Block. This is because we need one ForumTopic instance for each Topic instance created in Discourse. And since we have to duplicate topics for every cohort (as explained above), we need a ForumTopic instance for every cohort.</p> <p>The ForumTopic model also has a many-to-one relationship with ForumSubcategory, to represent how these topics are grouped into the subcagegory in Discourse.</p> <p>The ForumSubcategory can be thought of as a \"proxy\" for the Discourse subcategory. It's type property defines whether it's a COHORT subcategory or an ALL_ENROLLED subcategory. It then has a foreign key to a CohortForumGroup (if it's a COHORT type) or a CourseForumGroup (if it's an ALL_ENROLLED type) to represent which group is allowed to view the topics in this subcategory.</p> <p>To limit users in Discourse to the correct topics, a Discourse group must be created for a course, and then an additional group for each cohort in the course. The CourseForumGroup and CohortForumGroup models represent these groups in KinesinLMS.</p> <p>If there is no need to segment topics by cohort, then there will only be one 'default' ForumSubcategory and one 'default' CohortForumGroup for a course. The <code>is_default</code> property for CohortForumGroup would be set to True. All cohorts for the course would then use the same default CohortForumGroup.</p> <p>A cohort in a course is linked to CohortForumGroup via the Cohort model's <code>cohort_forum_group</code> foreign key property.  This allows many cohorts in a course to use the same CohortForumGroup, such as in the scenario described above.</p>"},{"location":"forum/forum_overview/","title":"Forum Overview","text":"<p>KinesinLMS is designed to integrate with an external forum provider for forum services.</p> <p>Why not use a local app for forums? There are a number of Django apps that provide forum functionality, but in our experience none of them are as good as the dedicated forum providers.</p> <p>Since Discourse was used during KinesinLMS's early development, it is the only forum provider currently supported, and the data model leans heavily towards supporting Discourse. So a bit of work is probably in order to support a different forum provider.</p>"},{"location":"forum/forum_overview/#forumprovider-and-forumservice","title":"ForumProvider and ForumService","text":"<p>The ForumProvider is an abstract class that defines the properties of our external forum provider. The ForumService class defines methods to access that provider's functions via an API or webhooks. At the moment, only one concrete ForumProvider and ForumService is supported (once again, for Discourse). So the instructions in this section are specific to Discourse.</p> <p>It shouldn't be too difficult though if you want to create a new ForumProvider and ForumService for another forum, such as Misago.</p> <p>Futhermore, you may decide you want the forum to be a part of the KinesinLMS app, and not an external service. If so, it's probably not a far stretch however if you wanted to integrate something like django-machina as an app rather than rely on an external service.</p> <p>If you pursue either of these alternatives, let us know how it goes!</p>"},{"location":"forum/forum_overview/#apologies-extra-complexity","title":"Apologies: Extra Complexity","text":"<p>Discourse has worked really well for us, but it does add some extra complexity to the development process.</p> <p>Unfortunately, the Discourse site does not have a way to create 'test' accounts, so when developing locally you'll need to set up a local instance of Discourse...which can be a pain and add complexity that we're trying hard to avoid. But it's not too bad, especially if you use Docker.</p> <p>Read on for more info...</p>"},{"location":"forum/local_setup/","title":"Local Discourse Setup","text":"<p>In order to use forums when developing locally, you'll need to set up a local instance of Discourse. This is because the Discourse website does not have a way to create 'test' accounts, so you'll need to create a local instance of Discourse and then link it to your local KinesinLMS instance.</p> <p>This is a pain, and of all the third-party services we use, Discourse is the only one that maybe should be replaced with a local implementation like django-machina.</p> <p>But the process is not too bad of a process if you use Docker.</p> <p>The following instructions are for docker on macOS...see the Discourse forum for other options.</p> <p>Note that once you have Discourse running locally in docker, you'll need to create a new user account and link the Discourse instance to your KinesinLMS instance. (This same configuration process needs to happen when linking a live Discourse instance to KinesinLMS staging or production instance.)</p>"},{"location":"forum/local_setup/#set-up-discourse-using-docker","title":"Set Up Discourse Using Docker","text":"<p>The following steps describe how you would set up Discourse for local development, using Docker.</p> <p>Discourse has a guide to setting up via Docker here : https://meta.discourse.org/docs?category=56&amp;tags=dev-install&amp;topic=102009</p> <p>The steps described there are listed below, but the Discourse page is likely more up to date, so check there first.</p> <p>First clone our fork of the Discourse repo to your local machine. We made one change to the <code>boot_dev</code> script to avoid an error when building the container when building on macOS. See the notes below for more info.</p> <pre><code>    git clone https://github.com/danielmcquillen/discourse.git\n</code></pre> <p>From there, <code>cd</code> into the newly created <code>discourse</code> the directory (cloned from GitHub repo).</p> <p>Then, rely on a second hack (sigh) to avoid errors when building the container. Follow the steps noted here to create your own Discourse Docker container and resolve Node upgrade issues in the base Docker container for Discourse. Build that new container:</p> <pre><code>docker build -t discourse_node20 - &lt; Dockerfile\n</code></pre> <p>Now you can run the base commands to establish the container per the Discourse instructions in this post This does a one-time setup of the docker container ( via their symlink d -&gt; /bin/docker ).</p> <pre><code>    d/boot_dev --init\n</code></pre> <p>At the end of the <code>boot_dev</code> process, you'll be asked to create an admin user. Do that, giving it the same username as your superuser on the KinesinLMS instance you'll be linking to Discourse. For me, that user is <code>daniel</code>. Make sure to grant Admin privileges to the account when prompted. The process will look something like this:</p> <pre><code>    14:35 $ ./bin/docker/rake admin:create\n    Email:  daniel@mcquilleninteractive.com\n\n    Ensuring account is active!\n\n    Account updated successfully!\n    Do you want to grant Admin privileges to this account? (Y/n)  y\n\n    Your account now has Admin privileges!\n</code></pre> <p>Once the container is set up, anytime you want to run the container, run the following command ::</p> <p>First terminal ::</p> <pre><code>    d/rails s\n</code></pre> <p>Second terminal ::</p> <pre><code>    d/ember-cli\n</code></pre> <p>This runs the server on localhost:9292 ::</p> <pre><code>    http://localhost:4200/\n</code></pre> <p>IMPORTANT: Make sure to check notes in docs about steps you might need to do after the init step (e.g. migrations).</p> <p>https://meta.discourse.org/t/beginners-guide-to-install-discourse-for-development-using-docker/102009</p>"},{"location":"forum/local_setup/#connecting-kinesinlms-to-discourse-locally","title":"Connecting KinesinLMS to Discourse Locally","text":"<p>In the above step you should have created a new user in Discourse with the same username as your admin user in KinesinLMS. For me, that user is <code>daniel</code>.</p> <p>You're now ready to connect KinesinLMS to Discourse. This is the same process regardless of whether you're running locally on in staging or production. Read on for details.</p>"},{"location":"forum/local_setup/#set-up-the-forum-provider","title":"Set up the Forum Provider","text":"<p>In KinesinLMS, go to Managment and click \"Configure\" in the Forum Provider card.</p> <p>The only way you can use this form is if you've set up the <code>FORUM_API_KEY</code> and <code>FORUM_SSO_SECRET</code> environment variables. If you haven't, the form will warn you to do so before proceeding.</p> <p>Make sure the \"Active\" checkbox at the top of the form is checked.</p> <p>For Forum url, enter <code>http://localhost:4200/</code> (or whatever the url is for your Discourse instance running in Docker)</p> <p>For Forum API username, enter the username of your admin user in KinesinLMS, which should be the same as what you used to create your admin in Discourse docker.</p>"},{"location":"forum/provider_integration/","title":"Forum Provider Setup and Integration","text":"<p>First up, apologies. Setting up and using forums for courses isn't as easy as it should be. Ideally, KinesinLMS would have its own forum app, and we wouldn't need any of this silliness.</p> <p>But we don't have that, yet, and we've found Discourse to have the best offering, including an open source version. So KinesinLMS leans toward using Discourse as a provider of forums.</p> <p>This means, however, some ugly integration steps.</p>"},{"location":"forum/provider_integration/#set-up-a-production-discourse-server","title":"Set Up a Production Discourse Server","text":"<p>The first step to providing forum discussions in your KinesinLMS courses is to create an account on Discourse (easy, but costs money) or set up and configure your own public-facing Discourse instance from the open source version (difficult, probably still costs money).</p> <p>Either way, we'll assume you did set up your Discourse forum, and you now have it available at some public URL, for example, the Discourse forum integrated with SCL's iBiology Courses site is here https://discuss.ibiology.org.</p> <p>We'll now have to configure both this Discourse installation and KinesinLMS so forum access is seamless.</p> <p>Proceed to \"Connecting Forum\" for more instructions.</p>"},{"location":"groups_and_permissions/overview/","title":"Groups and Permissions Overview","text":"<p>KinesinLMS uses groups and permissions to enable and disable features and allow different users or groups access. It also uses \"switches\" to turn site features on and off. This page describes how to leverage these tools to give users access to different parts of the site.</p> <p>KinesinLMS follows a simple approach to managing user groups and permissions, relying on the infrastructure provided by Django for some tasks, and a special \"CourseStaff\" model for course-specific permissions.</p> <p>Only a few groups, permissions and switches have been enabled. You're welcome to continue extending this default Django setup to provide more granular control of who gets access to what (including new features you might add).</p>"},{"location":"groups_and_permissions/overview/#superuser-and-staff","title":"Superuser and Staff","text":"<p>By default, Django provides each user with boolean flags for two properties:</p> <ul> <li><code>Superuser</code> : User has all permissions available. Ultimate power.</li> <li><code>Is staff</code> : User can access the Django admin panel for this site. Not ultimate, but very respectible power.</li> </ul> <p>These settings are pretty important, and can only be edited via the Django admin panel...a user cannot change them by logging into the site and selecting \"My Profile\" or \"My Settings\".</p> <p>If you are running KinesinLMS, your user should already have \"superuser\" designation.</p> <p>When you have users who you want to have access to the Django admin panel, you can use the Django admin panel to check \"Is staff\" on their user after they registered.</p> <p>Note</p> <p>Warning: Giving someone superuser or staff designation provides them with a lot of control over KinesinLMS. If the user really doesn't need that much power, try creating a new Group, updating KinesinLMS to provide access to a feature base on that group, and then add that user to the group. Only provide staff access if the user really needs it. And only give superuser access if they really, really, really need it.</p>"},{"location":"groups_and_permissions/overview/#groups-and-permissions","title":"Groups and Permissions","text":"<p>Django comes with a built-in system for \"groups\" and \"permissions.\" KinesinLMS leverages these to provide access to certain features.</p> <p>In Django, you can create permissions and assign one or more permissions to a group. Meanwhile, a user can be assigned to one or more groups, so there are different ways one can assign permissions to that user.</p> <p>In KinesinLMS, are two main Django \"Groups\" defined to help allocate permissions to the app's more protected features and content:</p> <ul> <li><code>AUTHOR</code> - A group for users who need to be able to author content using the 'Composer' feature</li> <li><code>EDUCATOR</code> - A group for users who have special 'educator' rights, like viewing analytics in a course or viewing assessment answers in the learning library.</li> </ul> <p>KinesinMLS also creates a group for every course you create, giving it the standardized name: <code>COURSE_GROUP_(course slug)</code>. For instance, if your course's slug is DEMO_SP, the group will have the name <code>COURSE_GROUP_DEMO_SP</code>. Any user that enrolls in a course will be added to that course's group.</p>"},{"location":"groups_and_permissions/overview/#the-author-group","title":"The \"AUTHOR\" Group","text":"<p>An \"Author\" is a user with permissions to author courses. This means they get access to Composer via the Composer navigation item in the top nav.</p> <p>Note</p> <p>A user must be in the <code>AUTHOR</code> group to access \"Composer\".</p>"},{"location":"groups_and_permissions/overview/#the-educator-group","title":"The \"EDUCATOR\" Group","text":"<p>An \"Educator\" is a user with permissions to view \"educator\"-level information, at the site level or for courses. A user must be in this group to view the \"Educator Resources\" section of the site.</p> <p>However, adding a user to the \"Educator\" group is not enough to grant them access to educator material in a course. You must then create a \"CourseStaff\" instance for each course the educator should be able to access. More on that next...</p> <p>Note</p> <p>A user must be in the <code>EDUCATOR</code> group to access educator resources in a course and certain data in the Learning Library.</p>"},{"location":"groups_and_permissions/overview/#assigning-groups","title":"Assigning Groups","text":"<p>To assign a user to a group, you use the Django admin panel, find the user in the Users list and select the user for edit.</p> <p>In the User edit screen, there's a \"Permissions\" section about halfway down the page for adding and removing groups for a user. Move the groups you want to assign to the user from the \"Available groups\" panel to the \"Chosen groups\" panel.</p> <p></p> <p>When a user is in a group, they get all the permissions provided to that group.</p>"},{"location":"groups_and_permissions/overview/#coursestaff-model","title":"CourseStaff Model","text":"<p>A user needs to be in the <code>EDUCATOR</code> group to access educator-specific information for a particular course. However, that in itself is not enough. You may want a user to be able to access educator material in only some courses.</p> <p>Therefore, to access educator views and resources for a particular course, a user must also be assigned to a particular course as \"Course Staff.\"</p> <p>This granularity allows the admin to provide educator access on a course-by-course.</p> <p>The site admin can use the Django admin panel to add a CourseStaff instance for a user and a course. There is currently only one role type for a CourseStaff, but the model could be extended to support more role types in the future (with a user getting one or more roles, depending on their access needs).</p> <p></p> <p>When a user is assigned as course staff to a course, they can then view the course admin tab for a course, and access the information provided in that section.</p> <p></p>"},{"location":"import_export/overview/","title":"Importing and Exporting","text":"<p>KinesinLMS supports a limited set of import and export features. Courses and be exported and imported in a custom format and in the Common Cartridge format.</p> <p>Export and import options are available in the Composer section of the site, under the \"Course\" menu.</p>"},{"location":"import_export/overview/#exporting","title":"Exporting","text":"<p>Courses can be exported to one of two formats:</p>"},{"location":"import_export/overview/#exporting-in-kinesinlms-format","title":"Exporting in KinesinLMS Format","text":"<p>This is a custom format used by KinesinLMS to export and import courses. It is a .zip file that contains a json data file and one or more directories for course resources or other data.</p>"},{"location":"import_export/overview/#common-cartridge","title":"Common Cartridge","text":"<p>Common Cartridge is a standard format for exporting and importing courses. It is a .zip file that contains a manifest file and one or more directories for course resources or other data.</p> <p>KinesinLMS currently exports a small subset of the Common Cartridge 1.3 format.</p>"},{"location":"import_export/overview/#importing","title":"Importing","text":"<p>Courses can be imported from one of two formats:</p> <ul> <li>KinesinLMS Format</li> <li>SCL Format (Science Communication Labs format)</li> </ul> <p>The import process will create a new course in the system and populate it with the content from the imported file. The import process will not overwrite any existing courses or content.</p>"},{"location":"import_export/overview/#importing-kinesinlms-format","title":"Importing KinesinLMS Format","text":"<p>This format should be a complete representation of a course exported from KinesinLMS. It is a .zip that contains everything one would need to recreate the course in KinesinLMS.</p>"},{"location":"marketing/marketing_overview/","title":"Marketing Overview","text":"<p>KinesinLMS comes with some basic 'marketing' pages preconfigured, but you'll probably want to update these pages to match your institution, goals, and so on.</p> <p>Some pages, like Terms of Service, About Us, Contact and Privacy Policy definitely should be updated.</p> <p>Here are the 'marketing' pages for the site:</p> <ul> <li>About Us</li> <li>Contact</li> <li>FAQ </li> <li>Get Started : A page that provides some basic tips on how a user can get started on the site.</li> <li>Testimonials</li> <li>Terms of Service</li> <li>Privacy Policy</li> </ul> <p>For most pages, you can update them by just changing their HTML directly. You can locate their template in the <code>templates/marketing</code> folder.</p> <p>Some marketing features, like testimonials, are modified via the admin panel. More on that next.</p>"},{"location":"marketing/testimonials/","title":"Testimonials","text":"<p>User testimonials must be entered in the admin panel, as they are stored in the system database.</p> <p>There are two types of testimonials:</p> <ul> <li>\"Site\" testimonials that are more generic in nature and don't reference a particular course.</li> <li>\"Course\" testimonials that pertain to a particular course.</li> </ul> <p>You can add and configure a testimonial using the Django admin panel /admin/marketing/testimonial/</p> <p>Note that testimonials have a 'visible' property that you can use to control which testimonials are shown to the user.</p>"},{"location":"overview/acknowledgements_and_attributions/","title":"Acknowledgments","text":"<p>( Content to come ... )</p>"},{"location":"overview/acknowledgements_and_attributions/#project-funding","title":"Project Funding","text":"<p>KinesinLMS was developed with support from the National Institute for General Medical Sciences (grants numbers R25GM116704 and R25GM139147).</p>"},{"location":"overview/acknowledgements_and_attributions/#libraries","title":"Libraries","text":"<p>KinesinLMS uses a number of open source libraries. Some of the most crucial are:</p> <ul> <li>Django</li> <li>Django Rest Framework</li> <li>Allauth</li> </ul> <p>For a full list of open source libraries used</p> <ul> <li>you can use the <code>pip-licenses</code> library to list all Python dependencies: https://pypi.org/project/pip-licenses/</li> <li>you can use the <code>license-report</code> library to list all Node dependencies: https://www.npmjs.com/package/license-report</li> </ul>"},{"location":"overview/acknowledgements_and_attributions/#icons-and-graphics","title":"Icons and Graphics","text":"<ul> <li>Unless noted otherwise, icons are by Bootstrap Icons: https://icons.getbootstrap.com/</li> <li>Default course image by Gerd Altmann from Pixabay</li> </ul>"},{"location":"overview/guiding_principles/","title":"Guiding Principles","text":"<p>\"Whaa? Another LMS? There's already a thousand out there! Why one more?\"</p> <p>Yes, it's true. There are quite a few e-Learning systems a team can pick from. However, if you filter that list for certain features, licenses and programming languages, it drops to a much smaller list very quickly.</p> <p>Let's say you want a platform</p> <ol> <li>with a strong open-source license like AGPL</li> <li>...and developed with Python and Django</li> <li>...and focused on minimizing complexity so your small development team (probably one person) can manage the entire    project and add the interesting features you need quickly.</li> </ol> <p>Now that list is looking much smaller. And if you add in the requirement that the platform be designed to support e-Learning research projects, it's even more limited.</p> <p>We built KinesinLMS because we wanted a platform that met those criteria. We wanted a platform that was designed to be quickly and easily set up by small teams doing interesting e-learning research projects.</p> <p>What follows is a rough collection of the ideas and principles that guide KinesinLMS's development.</p>"},{"location":"overview/guiding_principles/#keep-things-simple","title":"Keep Things Simple","text":"<ul> <li>If there's a simple way to do something, do it that way even if it's not as snazzy.</li> <li>(But go ahead and be snazzy if it provides real user experience and learning benefit.)</li> <li>Try hard to keep developer workflows simple, especially building and publishing. Limit the number of   points where things can go wrong.</li> </ul>"},{"location":"overview/guiding_principles/#keep-code-understandable","title":"Keep Code Understandable","text":"<ul> <li>Good style: follow the Google Python Style guidelines.</li> <li>Simple style: don't use fancy features of the language if a simpler feature will do. Channel your inner Strunk and   White.</li> <li>Code comments: when you wade into the debate on whether to include more or less comments with a block of code, err   on the side the being obvious rather than being cryptically terse.</li> </ul>"},{"location":"overview/guiding_principles/#respect-user-privacy","title":"Respect User Privacy","text":"<ul> <li>By default, don't use third-party tracking services.</li> <li>Internal tracking should use anonymous identifiers as much as possible.</li> <li>It should be easy for an admin to remove a user from a system. It might not be possible to completely remove every   trace of activity (e.g. event logs), it should be possible to easily delete those things we can delete and for the   rest remove all identifying information.</li> </ul>"},{"location":"overview/introduction/","title":"Introduction","text":"<p>KinesinLMS is a Learning Management System (LMS) designed to be a simple, easy-to-use, and flexible platform for managing and delivering online courses. It's a 'just enough' LMS that you can use as a base for your e-Learning experiments and research projects.</p> <p>KinesinLMS is built on the Django web framework and uses standard open-source tools and libraries wherever possible:</p> <ul> <li>PostgresSQL for the database.</li> <li>Bootstrap for styles.</li> <li>Django Rest Framework for the API.</li> <li>Celery for asynchronous tasks.</li> </ul> <p>...and so on.</p> <p>For more complex things like badges, email automations, surveys and forums, KinesinLMS expects you'll use third-party services and therefore provides simple integrations for each...although there's nothing stopping you from creating your own custom implementations of these features.</p>"},{"location":"overview/introduction/#hypermedia-and-rich-interactions","title":"Hypermedia and \"Rich\" Interactions","text":"<p>KinesinLMS is opinionated about \"rich\" clients: it assumes that for most user interactions you can use basic, boring Django views and templates...but when you need more interactivity, you can use \"hypermedia\" via HTMx to get immediate and engaging interactions without introducing a complicated front-end framework. Furthermore, using HTMx allows the developer to continue to use the simple (and effective) Django form classes rather than crafting custom APIs and shuttling JSON back and forth for every interaction.</p> <p>However, certain features like fully interactive assessments (e.g. DiagramTool ) may require a more complex front-end. In that case we use React. But we try to keep the React components as simple as possible, and continually re-evaluate whether we need React and its build system at all. (Web components are another option we're considering to further reduce complexity.)</p> <p>We try to remember that the benefit of each \"rich\" interaction added to the platform must be balanced against the complexity it introduces, potentially increasing the number of developers who need to work on the project and decreasing the number of students who can access the course through their (potentially limited) mobile devices.</p>"},{"location":"overview/introduction/#background","title":"Background","text":"<p>KinesinLMS originated as a custom e-Learning platform developed by McQuillen Interactive for Science Communication Lab (SCL) as part of SCL's iBiology Courses project. SCL funded the work with support from the National Institute for General Medical Sciences (grants numbers R25GM116704 and R25GM139147).</p> <p>iBiology Courses is an e-learning site dedicated to helping university students and post-graduate researchers become better scientists and enhance career and professional development. The iBiology Courses e-Learning platform was built from scratch after the team struggled to find a simple, agile and easily extensible platform for SCL's unique e-learning research goals.</p> <p>In 2023, SCL was funded by a supplementary  National Institute for General Medical Sciences grant to make the iBiology Cources custom e-Learning platform open source and available to the broader scientific community. KinesinLMS is the result of that effort!</p>"},{"location":"overview/introduction/#where-to-go-from-here","title":"Where to Go from Here","text":"<p>Some devs prefer to learn by doing. If this is you, it's probably best to get right into it by setting up a local instance, and then loading the \"Demo Course\" archive (<code>resources/courses/demo_course_archive.zip</code>) so you can see what a course looks like, both in the public-facing \"Catalog\" and when you've enrolled in the course.</p> <p>The quick start on the next page will help you get the system going.</p> <p>Note</p> <p>These docs are a work in progress. We've tried to fill them out with background on most high-level features, but if something's wrong or missing please let us know -- or write it yourself and submit a PR to help us document KinesinLMS!</p>"},{"location":"overview/quick_start/","title":"Quick Start","text":"<p>This page provides a brief overview of how to get KinesinLMS set up on your local machine and populated with a \"Demo\" course.</p> <p>These instructions assume you have some development experience and understand the basics of things like installing and using PostgreSQL or Redis, or using Python virtual environments. If you don't, this part will be a bit tricky, and you might want to get some help.</p> <p>This process is described in more detail on the Local Setup page in the Development section.</p> <p>For actually deploying a site, review the <code>deployment</code> section.</p> <ol> <li>Clone the KinesinLMS repo to your local machine. <code>git clone &lt;https://github.com/ScienceCommunicationLab/KinesinLMS/&gt;</code> and <code>cd KinesinLMS</code>  into the newly created directory.</li> <li>Install the project dependencies.<ol> <li>System: use your operating system's package manager or installation program to install <code>postgresql</code>, <code>python&gt;=3.9</code>, <code>redis</code>, <code>node</code>, and <code>npm</code>. Unfortunately there's a bit of complexity here that's outside the scope of these docs. The Django Cookie Cutter documentation has more details on this step: https://cookiecutter-django.readthedocs.io/en/latest/developing-locally.html</li> <li>Server-side: using <code>python&gt;=3.9</code> in a virtual environment, run <code>pip install -r requirements/local.txt</code> to install the packages  from <code>requirements/local.txt</code>. More on creating virtual environments here: https://docs.python.org/3/library/venv.html</li> <li>Client-side: run <code>npm install</code> from the root of the KinesinLMS project to install the node packages  from <code>package.json</code>. Then run <code>npm run build</code> to build the KinesinLMS javascript files.</li> </ol> </li> <li>Copy the <code>.env.example</code> to <code>.env</code>, change the values as you wish.<ul> <li>To make sure the project uses your .env file, add this value to your shell's environment variables:  <code>DJANGO_READ_DOT_ENV_FILE=True</code></li> </ul> </li> <li>Run a local Redis and Postgres database.<ul> <li>You can use the <code>docker.compose.yml</code> if you want to use Docker: <code>docker-compose -f docker-compose.yml up</code></li> <li>Adjust the <code>REDIS_URL</code> and <code>DATABASE_URL</code> in <code>.env</code> accordingly.</li> </ul> </li> <li>Set up integrations locally (optional):<ul> <li>Fill in the <code>TEST_*</code> environment variables in the <code>.env</code> file.</li> </ul> </li> <li>Run all database migrations using <code>python manage.py migrate</code></li> <li>Set up the initial project model instances KinesinLMS expects using <code>python manage.py setup_all</code>.</li> <li>Create an admin user in the application: <code>python manage.py createsuperuser</code>.</li> <li>The first time you log in as the admin user, watch the django runserver logs to locate the email confirmation link.    Visit that link to activate the account. (This is a usual step when using AllAuth for authorization.)</li> <li>Load the <code>.env</code> variables into your current shell, and then run the Django server <code>python manage.py runserver 8000</code></li> </ol> <p>Then, log in and navigate to the \"Composer\" tab. There, you can click Course &gt; Import Course and load the demo_course_archive stored in <code>resources/courses/demo_course/demo_course_archive.zip</code>. You should now see this course in the Course Catalog and be able to enroll in it and view what a basic course looks like on KinesinLMS.</p>"},{"location":"surveys/survey_integration/","title":"Qualtrics Survey Integration","text":"<p>If you have succesfully set up a SurveyProvider in KinesinLMS with information about your Qualtrics account, you can now start adding surveys you've created in Qualtrics into your courses.</p> <p>This section shows you how to do this in two sections below :</p> <ol> <li>Prepare a survey in Qualtrics so that it</li> <li>registers user information and</li> <li>calls back to KinesinLMS when complete</li> <li>Add this survey to a course using the \"Survey\" block in Composer.</li> </ol>"},{"location":"surveys/survey_integration/#preparing-a-survey-in-qualtrics","title":"Preparing a Survey In Qualtrics","text":"<p>The first step to integrating a survey from Qualtrics into your course is to create the survey in Qualtrics. Details on creating surveys in Qualtrics is outside the scope of this documentation, but it's not very difficult and if you haven't done it before it shouldn't take too long to get started.</p> <p>Once you've got a survey ready, there are a few configuration steps you'll need to perform to your survey to:</p> <ol> <li>get the survey to accept a user identifier from KinesinLMS, and</li> <li>create a \"WebService\" workflow item to call back to KinesinLMS once a survey has been completed.</li> </ol>"},{"location":"surveys/survey_integration/#adding-the-user-identifier","title":"Adding the User Identifier","text":"<p>When a survey is embedded in a course, KinesinLMS will send the student's anonymous ID to Qualtrics as a GET variable in the survey URL when it shows the survey in an iframe within a course unit. (It's better to use an anonymous ID than passing around identifiable information like email, but you could update KinesinLMS to send email or username.) The variable name is <code>uid</code>, so the end of the url will look like <code>?uid=abca32-1252...</code>.</p> <p>So we need to configure the Qualtrics survey to accept and store this user information. To do this, go to the \"Survey\" tab and then click the \"Survey Flow\" option in the left nav.</p> <p></p> <p>You'll see the default survey flow, with an option to \"Add a New Element Here\". Click that link.</p> <p></p> <p>Select the \"Embedded Data\" option and enter \"uid\" into the field displayed after clicking.</p> <p></p> <p>You should now see something like this, which indicates Qualtrics will store the incoming <code>uid</code> field as embedded data as part of any survey completion.</p> <p></p> <p>Don't forget to click \"Apply\" at the bottom of the page.</p>"},{"location":"surveys/survey_integration/#adding-the-callback-workflow","title":"Adding the Callback Workflow","text":"<p>Another nice Qualtrics feature that KinesinLMS supports is getting notified when a user has completed a survey. KinesinLMS does this by accepting a \"WebService\" call from Qualtrics, which essentially means KinesinLMS listens for a particular automated web request from Qualtrics that indicates a survey has been completed by a user.</p> <p>So if we want KinesinLMS to know when surveys are completed, We need to configure both the individual survey and KinesinLMS to support the web callback.</p> <p>To set up our example survey to issue the web callback to KinesinLMS, we'll select the \"Workflows\" tab in our Qualtrics survey. (Note that you need a certain level of permissions in Qualtrics to have access to workflows, so if you don't see the tab, contact your account owner to find out more.)</p> <p>When in workflows, click the \"Create a Workflow\" button and select \"Start when an event is received\" from the dropdown.</p> <p></p> <p>Then select \"Survey response\" for the workflow type we want to implement:</p> <p></p> <p>Accept the default settings for this item (\"Newly created items\" should be checked) and click \"Finish.\"</p> <p>At this point we have a workflow that will kick off whenver someone generates a survey response. Now we need to tell Qualtrics to make a request to the KinesinLMS server to let it know what happened.</p> <p>Click the \"+\" icon beneath the \"Survey response\" item and then click the \"Add a task\" option in the dropdown.</p> <p></p> <p>There are a lot of task available, but we're looking for one named \"Web Service\". Enter \"Web\" into the filter field to make it easier to find...</p> <p></p> <p>Select the \"Non-authenticated\" option. (We'll still pass along a secret we'll set up further below, to make sure only Qualtrics web requests are accepted)</p> <p></p> <p>In the next step we'll configure the WebSevice item to call our KinesinLMS system.</p> <p>For the \"Rest\" option, change the type to \"POST\" and add the URL of your KinesinLMS system along with the <code>/surveys/student_survey_complete_callback</code> route. So if your domain name was example.com, the URL you'll enter will look like <code>https://example.com/surveys/student_survey_complete_callback</code>.</p> <p></p> <p>Now we want Qualtrics to send four peices of information to our system when a survey is finished:</p> <ul> <li>the ID of this survey response</li> <li>a secret code</li> <li>the survey ID</li> <li>the user's anonymous ID</li> </ul> <p>We use the \"Body\" section to do that. Select \"Json\" and \"key value pairs\" and click the \"Add key-value pair\" button four times to add four fields. Then configure them as shown below.</p> <p></p> <ul> <li>The secret can be whatever you want, but it has to be the same for every survey in the course. We'll use this same value when we configure KinesinLMS next.</li> <li>It's strange that Qualtrics makes it hard to find the actual ID of the survey, but the easiest way is to just look in the URL of the Qualtrics site when editing the survey...it's the value that starts with <code>SV_</code></li> </ul> <p>Click \"Save\"</p>"},{"location":"surveys/survey_integration/#getting-the-anonymouse-link-for-your-survey","title":"Getting the \"Anonymouse Link\" for Your Survey","text":"<p>One final piece of information: you'll need the \"anonymous link\" to the survey when you configure it in KinesinLMS. You can get the survey's anonymous link from the \"Distributions\" &gt; \"Anonymous Link\" page in Qualtrics when editing the survey. Copy and hold on to that URL for the next step.</p> <p>Alright! That concludes the Qualtrics side of the configuration. You should see your \"WebService\" workflow item now configured in your Workflows tab:</p> <p></p> <p>Next step, we'll configure KinesinLMS to accept these callbacks.</p>"},{"location":"surveys/survey_integration/#add-a-qualtrics-survey-to-a-course","title":"Add a Qualtrics Survey to a Course","text":"<p>Now that you have your survey configured in Qualtrics, you can add this survey to the course. This is a two-step process:</p> <ul> <li>add a \"course survey\" to the course so the survey is available to blocks in the course.</li> <li>add a survey block where you want the survey to appear. You can have the same survey appear in multiple places in a course.</li> </ul>"},{"location":"surveys/survey_integration/#adding-a-course-survey","title":"Adding a \"Course Survey\"","text":"<p>To add a survey to a course, you create a \"Course Survey\" for your course in Composer.</p> <p>First, open your course in Composer and select \"Surveys\":</p> <p></p> <p>Click \"Add Course Survey\" and enter the information for your survey in the form.</p> <p>Set the \"Survey ID\" field to the Qualtrics ID for your survey, and the \"Url\" field to the anonymous link you copied from Qualtrics in the earlier step.</p> <p>Your form should look something like this...</p> <p></p> <p>KinesinLMS can send an automated email to a user to remind them to take the survey. The email will contain a link to the unit the survey first appears in.</p> <p>If you want this feature, select \"Send reminder email.\"</p> <p>If \"send reminder email\" email is selected, the event that triggers KinesinLMS to schedule the email reminder depends on the type of survey.</p> <ul> <li>pre-course: Reminder email is scheduled when a student enrolls in a course.</li> <li>basic: Reminder email is scheduled when student first views a unit with the survey.</li> <li>post-course: Reminder email is scheduled when a student completes a course.</li> <li>follow-up: Reminder email is scheduled when a student completes a course.</li> </ul> <p>Furthermore, if \"days delay\" is also defined, the reminder email will be sent after the specified number of days after the email is scheduled.</p> <p>Now that your survey is configured for your course, you can add it to a certain unit in the course contents.</p>"},{"location":"surveys/survey_integration/#adding-a-survey-block","title":"Adding a Survey Block","text":"<p>Navigate to the \"Contents\" tab and the unit in your course where you want the survey to appear.</p> <p>Add a \"Survey\" block type. The survey block panel will allow you to add:</p> <ul> <li>A header for this block</li> <li>HTML content (if you want content directly above the survey)</li> <li>A survey</li> </ul> <p>The dropdown control for survey should show all surveys configured for the course. You can show the same survey in multiple places.</p> <p></p> <p>Save your new survey block and click \"View in Course.\" You should see your survey in the course unit! Note that some browsers (e.g. Firefox) by default do not show iframe content. In this case, you might want to use Chrome or another browser that does.</p> <p>KinesinLMS does provide a link to directly access the survey for students whose browsers do not show iframes.</p>"},{"location":"surveys/survey_providers/","title":"Survey Providers","text":"<p>The first step to getting surveys integrated into your course is to create a link to an external service where you've authored your surveys. You create this connection by creating a \"Survey Provider\" instance in KinesinLMS via the management panel.</p> <p>Qualtrics is the only service currently supported, so in this section we will create an SurverProvider instance for Qualtrics.</p>"},{"location":"surveys/survey_providers/#creating-a-survey-provider","title":"Creating a Survey Provider","text":"<p>To go to the Survey Provider management page, select \"Survey Providers\" from the \"Management\" pull down in the top navigation.</p> <p>Once on the Survey Provider management page, click the \"Add Survey Provider\" button, which will display a dialog for entering the provider's information.</p> <p></p> <p>Fill in the dialog fields:</p> <ul> <li>Name: You can use any name here, this is only for reporting purposes...e.g. \"My Qualtrics Account\"</li> <li>Type: Only Qualtrics is allowed, so not much of a choice here.</li> <li>Slug: You don't have to add a slug, but it's useful in things like event tracking or import/export (if you don't enter a slug, it will be created for you by slugifying the name).</li> <li>Datacenter id: This is the Qualtrics datacenter assigned to you by Qualtrics.</li> <li>Callback secret: This can be any string of characters you want. You will use this string when setting up a Qualtrics server so that Qualtrics sends the secret to KinesinLMS anytime a survey is completed.</li> </ul>"},{"location":"surveys/survey_providers/#setting-the-qualtrics-api-key","title":"Setting the Qualtrics API Key","text":"<p>Qualtrics provides an API for advanced interactivity with surveys and other platform features. KinesinLMS does not leverage these APIs, but you could extend the existing code to leverage to do so.</p> <p>If you intend to add code to access the Qualtrics API, you'll need to store the API key for your Qualtrics account in KinesinLMS. It's best to store these kinds of keys in the environment, rather than the database, so KinesinLMS will look for this key in the environment variable <code>SURVEY_PROVIDER_API_KEY</code>.</p> <p>Although it doesn't currently use the Qualtrics API Key, KinesinLMS does indicate whether you have configured it or not in the environment, letting you know when it's set:</p> <p></p> <p>...or when it's not set:</p> <p></p>"},{"location":"surveys/surveys_overview/","title":"Survey Overview","text":"<p>Integrating surveys into a course can help provide vital information about learning outcomes, as well help you improve the overall user experience by providing user feedback. Structured survey data can be particularly helpful if the course is part of a formal research effort.</p> <p>There are a number of companies that offer survey authoring and hosting. KinesinLMS provides a simple integration with the Qualtrics service to render surveys directly in a course unit, and to track survey completions via Qualtrics web service calls. Unfortunately, KinesinLMS does not support other survey providers is supported at the moment...therefore this section focused on integrating surveys constructed in Qualtrics, including how to link the survey to a student via a 'uid' identifier.</p> <p>(Having said that, other survey providers could probably be supported without too much effort.)</p> <p>So read on if you want to learn how to create a survey in Qualtrics and integrate it into a KinesinLMS course.</p>"}]}